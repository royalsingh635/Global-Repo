package trnpbulkvhclreqapp.model.services;

import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;

import adf.utils.ebiz.EbizParamsAPPUtils;
import adf.utils.ebiz.EbizParamsMMUtils;
import adf.utils.ebiz.WorkFlowUtils;
import adf.utils.model.ADFModelUtils;

import adf.utils.model.dbprocsupp.ProcPrams;
import adf.utils.pusnnotification.NotificationSender;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import java.util.Map;
import java.util.Set;

import javax.faces.application.FacesMessage;

import oracle.adf.view.rich.context.AdfFacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.domain.Number;

import oracle.jbo.domain.Timestamp;


import oracle.jbo.server.RowQualifier;


import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;

import trnpbulkvhclreqapp.model.classes.BulkSoList;
import trnpbulkvhclreqapp.model.classes.BulkTrfList;
import trnpbulkvhclreqapp.model.services.common.TrnpBulkVhclReqAM;
import trnpbulkvhclreqapp.model.views.LOVCustNameVOImpl;
import trnpbulkvhclreqapp.model.views.LOVRouteVOImpl;
import trnpbulkvhclreqapp.model.views.LovCageVOImpl;
import trnpbulkvhclreqapp.model.views.LovGroupNmVOImpl;
import trnpbulkvhclreqapp.model.views.SearchParamDualVOImpl;
import trnpbulkvhclreqapp.model.views.SlsTrnpBulkVrItmVORowImpl;
import trnpbulkvhclreqapp.model.views.SlsTrnpBulkVrSrcVORowImpl;
import trnpbulkvhclreqapp.model.views.SlsTrnpBulkVrSummVOImpl;
import trnpbulkvhclreqapp.model.views.SlsTrnpBulkVrVOImpl;
import trnpbulkvhclreqapp.model.views.SlsTrnpBulkVrVORowImpl;
import trnpbulkvhclreqapp.model.views.TrnpBulkTrfViewVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jul 06 13:11:01 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TrnpBulkVhclReqAMImpl
  extends ApplicationModuleImpl
  implements TrnpBulkVhclReqAM
{
  /**
   * This is the default constructor (do not remove).
   */
  public TrnpBulkVhclReqAMImpl()
  {

  }
  private List<BulkTrfList> TrfList = new ArrayList<BulkTrfList>();

  public void setTrfList(List<BulkTrfList> TrfList)
  {
    this.TrfList = TrfList;
  }

  public List<BulkTrfList> getTrfList()
  {
    return TrfList;
  }

  private List<BulkSoList> SoList = new ArrayList<BulkSoList>();


  public void setSoList(List<BulkSoList> SoList)
  {
    this.SoList = SoList;
  }

  public List<BulkSoList> getSoList()
  {
    return SoList;
  }

  /*Modified On:- 21-11-2018
     * Changes done: Result view will be reseted first then search the data
     *
     * */

  public void searchBulkSo()
  {

    this.getTrnpBulkSoView1().setRangeSize(-1);
    this.getTrnpBulkTrfViewVO1().setRangeSize(-1);
    ViewObjectImpl vo = this.getTrnpBulkSoView1();
    ViewObjectImpl vo2 = this.getSlsTrnpBulkVr1();
    ViewObjectImpl vo3 = this.getTrnpBulkTrfViewVO1(); /**   This code of line added for Bulk Transfer Order  **/
    ViewObjectImpl Vo4 = this.getTrnpBulkTransferNewVo1();
    Integer docTyp = (Integer) vo2.getCurrentRow().getAttribute("DocTypId");
    String TrfDocId = (String) vo2.getCurrentRow().getAttribute("TransTrfDocId");
    String BulkTrfDocId = (String) vo2.getCurrentRow().getAttribute("TransBulkTrfOrdDocId");
    Integer TrfType=(Integer) vo2.getCurrentRow().getAttribute("TrfType");
  System.err.println("inside searchBulkSo_TrfType_____" + TrfType);
//    System.err.println("bulk ord id is : " + BulkTrfDocId);
    if ((docTyp != null && docTyp != 915) || (docTyp != null && docTyp != 5237) || docTyp == null)
    {
      //      System.err.println("inside____docTyp__is null or Sales Order or RMA___" + docTyp);
      vo.setNamedWhereClauseParam("bindOrgId", -1);
      vo.setNamedWhereClauseParam("bindHoOrgid", -1);
      vo.setNamedWhereClauseParam("bindSlocId", -1);
      vo.setNamedWhereClauseParam("bindCldId", -1);
      vo.setNamedWhereClauseParam("bindDocId", -1);
      vo.setNamedWhereClauseParam("bindEoId", -1);
      vo.setNamedWhereClauseParam("BindItmId", -1);
      vo.setNamedWhereClauseParam("bindCurrId", -1);
      vo.setNamedWhereClauseParam("BindStDt", null);
      vo.setNamedWhereClauseParam("BindEndDt", null);
      vo.setNamedWhereClauseParam("BindLocId", -1);
      vo.setNamedWhereClauseParam("BindEoGroup", -1);
      vo.executeQuery();


      String docId = (String) vo2.getCurrentRow().getAttribute("TransSoDocId");
      String rmaDocID = (String) vo2.getCurrentRow().getAttribute("TransRmaDocId");
      //        Integer docTyp = (Integer) vo2.getCurrentRow().getAttribute("DocTypId");
      String routeId = (String) vo2.getCurrentRow().getAttribute("TransRouteId"); ///
      Integer eoId = (Integer) vo2.getCurrentRow().getAttribute("TransEoId");
      String itmId = (String) vo2.getCurrentRow().getAttribute("TransItemId");
      Integer currId = (Integer) vo2.getCurrentRow().getAttribute("CurrIdSp");
      String LocId = (String) vo2.getCurrentRow().getAttribute("TransLocIdSearch");
      String mstId = (String) vo2.getCurrentRow().getAttribute("TransGroupId");
      vo.setNamedWhereClauseParam("bindOrgId", EbizParams.GLBL_APP_USR_ORG());
      vo.setNamedWhereClauseParam("bindHoOrgid", EbizParams.GLBL_HO_ORG_ID());
      vo.setNamedWhereClauseParam("bindSlocId", EbizParams.GLBL_APP_SERV_LOC());
      vo.setNamedWhereClauseParam("bindCldId", EbizParams.GLBL_APP_CLD_ID());
      if (docTyp != null && docTyp == 2341)
      {
        vo.setNamedWhereClauseParam("bindDocId", docId);
      }
      else if (docTyp != null && docTyp == 2342)
      {
        vo.setNamedWhereClauseParam("bindDocId", rmaDocID);
      }

      if (docTyp == null)
      {
        vo.setNamedWhereClauseParam("bindDocId", null);
        vo.setNamedWhereClauseParam("BINDDOCSRCTYPE", 2341);
      }
      else
      {
        vo.setNamedWhereClauseParam("BINDDOCSRCTYPE", docTyp);
      }
      vo.setNamedWhereClauseParam("bindEoId", eoId);
      vo.setNamedWhereClauseParam("BindItmId", itmId);
      vo.setNamedWhereClauseParam("bindCurrId", currId);
      vo.setNamedWhereClauseParam("BindLocId", LocId);

      vo.setNamedWhereClauseParam("BindRoutId", routeId);
      vo.setNamedWhereClauseParam("BindEoGroup", mstId);
      //        System.out.println(" ********************* routeId :: "+routeId);
      /**
             * Modified by : Surender Kumar
             * Modified on : 07-09-2018
             * Remarks : Fillter SO_Id on the basis of Start Dt and End Dt
             * TMS ID : 63436
             **/

      vo.setNamedWhereClauseParam("BindStDt", vo2.getCurrentRow().getAttribute("TransStDt"));
      vo.setNamedWhereClauseParam("BindEndDt", vo2.getCurrentRow().getAttribute("TransEndDt"));
      vo.executeQuery();
    }
    /**
      * Added by : Anamika Kaushik
      * Added on : 18-11-2023
      * Remarks :  This below code is added for searching Bulk transfer order document.
      * TMS ID : 129323
      **/
    if (docTyp != null && docTyp == 5237)
    {
//      System.err.println("inside code");
      Vo4.setNamedWhereClauseParam("BindOrgId", -1);
      Vo4.setNamedWhereClauseParam("BindSlocId", -1);
      Vo4.setNamedWhereClauseParam("BindCldId", -1);
      Vo4.setNamedWhereClauseParam("BindStDt", null);
      Vo4.setNamedWhereClauseParam("BindEndDt", null);
//      Vo4.setNamedWhereClauseParam("bindTrfType", -1);
      Vo4.executeQuery();
      //        System.err.println("_____________________inside________docTyp__is transfer Order___" + docTyp);
      Vo4.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
      Vo4.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
      Vo4.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
//      System.err.println("205 value of BulkTrfDocId : " + BulkTrfDocId);
      if (BulkTrfDocId != null)
      {
        Vo4.setNamedWhereClauseParam("bindDocId", BulkTrfDocId);
      }
      if (vo2.getCurrentRow().getAttribute("TransStDt") != null &&
          vo2.getCurrentRow().getAttribute("TransEndDt") != null)
      {
        Vo4.setNamedWhereClauseParam("BindStDt", vo2.getCurrentRow().getAttribute("TransStDt"));
        Vo4.setNamedWhereClauseParam("BindEndDt", vo2.getCurrentRow().getAttribute("TransEndDt"));
      }
      System.err.println("_____________________inside_______TrfType__is transfer Order___" + TrfType);
      Vo4.setNamedWhereClauseParam("bindTrfType", TrfType);
      Vo4.executeQuery();
//      System.err.println(" rows are : " + vo3.getEstimatedRowCount());
    }
    /**
       * Modified by : Manjeet Singh
       * Modified on : 13-10-2023
       * Remarks :  This below code is added for searching transfer order document.
       * TMS ID : 128922
    **/

    if (docTyp != null && docTyp == 915 && 1 == 2)
    {
      vo3.setNamedWhereClauseParam("BindOrgId", -1);
      vo3.setNamedWhereClauseParam("BindSlocId", -1);
      vo3.setNamedWhereClauseParam("BindCldId", -1);
      vo3.setNamedWhereClauseParam("BindStDt", null);
      vo3.setNamedWhereClauseParam("BindEndDt", null);
      vo3.executeQuery();


      //      System.err.println("_____________________inside________docTyp__is transfer Order___" + docTyp);
      vo3.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
      vo3.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
      vo3.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
      if (TrfDocId != null)
      {
        vo3.setNamedWhereClauseParam("BindDocId", TrfDocId);
      }
      if (vo2.getCurrentRow().getAttribute("TransStDt") != null &&
          vo2.getCurrentRow().getAttribute("TransEndDt") != null)
      {
        vo3.setNamedWhereClauseParam("BindStDt", vo2.getCurrentRow().getAttribute("TransStDt"));
        vo3.setNamedWhereClauseParam("BindEndDt", vo2.getCurrentRow().getAttribute("TransEndDt"));
      }

      vo3.executeQuery();
    }
    /****   Till Here  ***/

  }

  public Integer validateHdrBulkVr()
  {
    Integer num = 0;
    ViewObjectImpl vo1 = this.getSlsTrnpBulkVr1();
    Row r = vo1.getCurrentRow();
    String CrrDesc = (String) r.getAttribute("TransCurrDesc");
    if (CrrDesc == null)
    {
      return 1;
    }
    return num;
  }


  public void resetBulkSo()
  {


    ViewObjectImpl vo = this.getTrnpBulkSoView1();
    vo.setNamedWhereClauseParam("bindOrgId", -1);
    vo.setNamedWhereClauseParam("bindHoOrgid", -1);
    vo.setNamedWhereClauseParam("bindSlocId", -1);
    vo.setNamedWhereClauseParam("bindCldId", -1);
    vo.setNamedWhereClauseParam("bindDocId", -1);
    vo.setNamedWhereClauseParam("bindEoId", -1);
    vo.setNamedWhereClauseParam("BindItmId", -1);
    vo.setNamedWhereClauseParam("bindCurrId", -1);
    vo.setNamedWhereClauseParam("BindStDt", null);
    vo.setNamedWhereClauseParam("BindEndDt", null);
    vo.setNamedWhereClauseParam("BindLocId", -1);

    vo.setNamedWhereClauseParam("BindEoGroup", -1);

    vo.executeQuery();

    /**

           * Modified by : Surender Kumar

           * Modified on : 07-09-2018

           * Remarks : Fillter SO_Id on the basis of Start Dt and End Dt

           * TMS ID : 63436

           **/
    ViewObjectImpl bulkVo = this.getSlsTrnpBulkVr1();
    Row cR = bulkVo.getCurrentRow();
    if (cR != null)
    {
      cR.setAttribute("TransSoIdSearch", null);
      cR.setAttribute("TransCustSearch", null);
      cR.setAttribute("TransItemSearch", null);
      cR.setAttribute("TransCurrDesc", null);
      cR.setAttribute("TransStDt", null);
      cR.setAttribute("TransEndDt", null);
      cR.setAttribute("TransLocNmSrch", null);
      cR.setAttribute("TransDocTyp", null);

      cR.setAttribute("TransGroupId", null);
      cR.setAttribute("TransGroupNm", null);
      cR.setAttribute("DocTypId", 2341);
    }

    /**
            * Added by : Manjeet Singh
            * Modified on : 18-10-2023
            * Remarks : This below will reset the data in case of Transfer Order '.
            * TMS ID : 128922
   **/
    ViewObjectImpl vo3 = this.getTrnpBulkTrfViewVO1();
    vo3.setNamedWhereClauseParam("BindOrgId", -1);
    vo3.setNamedWhereClauseParam("BindSlocId", -1);
    vo3.setNamedWhereClauseParam("BindCldId", -1);
    vo3.setNamedWhereClauseParam("BindStDt", null);
    vo3.setNamedWhereClauseParam("BindEndDt", null);
//    vo3.setNamedWhereClauseParam("bindTrfType", -1);
    vo3.executeQuery();
    ViewObjectImpl Vo4 = this.getTrnpBulkTransferNewVo1();
    Vo4.setNamedWhereClauseParam("BindOrgId", -1);
    Vo4.setNamedWhereClauseParam("BindSlocId", -1);
    Vo4.setNamedWhereClauseParam("BindCldId", -1);
    Vo4.setNamedWhereClauseParam("BindStDt", null);
    Vo4.setNamedWhereClauseParam("BindEndDt", null);
    Vo4.setNamedWhereClauseParam("bindTrfType", -1);
    Vo4.executeQuery();

    /*** Till Here  *****/

    this.getSlsTrnpBulkVrSrc1().executeQuery();
  }

  //ArrayList<BulkSoList> SoListGrp
  public void populateItemDetail()
  {
    oracle.jbo.domain.Number totalGrossWt = StaticValue.NUMBER_ZERO;
    oracle.jbo.domain.Number totalBalWt = StaticValue.NUMBER_ZERO;
    ViewObjectImpl vo1 = this.getSlsTrnpBulkVrSrc1();
    //        ViewObjectImpl vo2 = this.getSlsTrnpBulkVr1();
    ViewObjectImpl vo3 = this.getSlsTrnpBulkVrItmVO3();
    ViewObjectImpl vo4 = this.getTrnpBulkTrfViewVO1();
    String Doc_Id = (String) this.getSlsTrnpBulkVr1().getCurrentRow().getAttribute("DocId");
    Integer typeId = (Integer) this.getSlsTrnpBulkVr1().getCurrentRow().getAttribute("DocTypId");
    if (typeId == 2341)
    {
      if (SoList.size() > 0)
        for (BulkSoList row: SoList)
        {
          /*This block of code is used to get the WareHouse Id from SLS$SO table.*/

          Row createSrcRow = vo1.createRow();
          createSrcRow.setAttribute("SrcDocId", row.getDocId());
          createSrcRow.setAttribute("SrcDocDt", row.getDocDt());
          createSrcRow.setAttribute("EoId", row.getEoId());
          createSrcRow.setAttribute("VehicleTyp", row.getVhclId());
          createSrcRow.setAttribute("LocId", row.getLocationId());
          createSrcRow.setAttribute("RouteDocId", row.getRouteId());
          createSrcRow.setAttribute("GrossWt", row.getGrossWt());
          createSrcRow.setAttribute("ReqTyp", row.getReqId());

          createSrcRow.setAttribute("DlvDt", row.getDlvDt());
          createSrcRow.setAttribute("WhId", row.getWhId());
          createSrcRow.setAttribute("DlvSchdlNo", row.getDlvSchdlNo());

          createSrcRow.setAttribute("ArrivalPnt", row.getArvlPnt());
          createSrcRow.setAttribute("DeparturePnt", row.getDprtPnt());

          createSrcRow.setAttribute("TotBndl", row.getSlsQty());
          createSrcRow.setAttribute("TotAmt", row.getTotAmt());
          createSrcRow.setAttribute("VhclNo",
                                    (row.getReqId().equals("C") || row.getReqId().equals("T"))? "customervehicle":
                                    null);

          vo1.insertRow(createSrcRow);
          totalGrossWt = totalGrossWt.add(row.getGrossWt());
          totalBalWt = totalBalWt.add(row.getBalanceWt());
          System.out.println("2342 *_*_*_*_*_*_*_*_*_ Before calling SLS.FN_INS_TRNP_BULK_LR_ITM ");
          //                    this.getDBTransaction().postChanges();
          //                    try {
          //                        ADFModelUtils.callFunction(this,
          //                                                   new StringBuilder("SLS.FN_INS_TRNP_BULK_LR_ITM(?,?,?,?,?,?,?,?,?,?)"), new Object[] {
          //                                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
          //                                                   EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(),
          //                                                   EbizParams.GLBL_APP_USR(), Doc_Id, row.getDocId(), null, typeId,
          //                                                   row.getDlvSchdlNo()
          //                        }, Types.INTEGER);
          //                    } catch (Exception e) {
          //                        e.printStackTrace();
          //                    }
          //                    this.getDBTransaction().postChanges();
        }
      this.getDBTransaction().postChanges();
      try
      {
        ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_INS_TRNP_BULK_LR_ITM_BCK(?,?,?,?,?,?,?,?,?,?)"),
                                   new Object[]
        {
          EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
          EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR(), Doc_Id, null, null, typeId, null
        }, Types.INTEGER);
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
      this.getDBTransaction().postChanges();
    }
    else if (typeId == 2342)
    {
      /**
               * Modified by : Surender Kumar
               * Modified on : 26-11-2018
               * Remarks :  This case added to polpualte item for RMA
               * TMS ID : 63372
            **/


      if (SoList.size() > 0)
        for (BulkSoList row: SoList)
        {

          Row createSrcRow = vo1.createRow();
          createSrcRow.setAttribute("SrcDocId", row.getDocId());
          createSrcRow.setAttribute("SrcDocDt", row.getDocDt());
          createSrcRow.setAttribute("EoId", row.getEoId());
          createSrcRow.setAttribute("VehicleTyp", row.getVhclId());
          createSrcRow.setAttribute("LocId", row.getLocationId());
          System.out.println("value of route doc id++++" + row.getRouteId());
          createSrcRow.setAttribute("RouteDocId", row.getRouteId());
          createSrcRow.setAttribute("GrossWt", row.getGrossWt());
          createSrcRow.setAttribute("ReqTyp", row.getReqId());

          createSrcRow.setAttribute("DlvDt", row.getDlvDt());
          if (row.getWhId() != null)
            createSrcRow.setAttribute("WhId", row.getWhId());
          else
            createSrcRow.setAttribute("WhId", "WH00001");
          createSrcRow.setAttribute("DlvSchdlNo", new Integer(1));

          createSrcRow.setAttribute("ArrivalPnt", row.getArvlPnt());
          createSrcRow.setAttribute("DeparturePnt", row.getDprtPnt());
          createSrcRow.setAttribute("TotBndl", row.getSlsQty());
          createSrcRow.setAttribute("TotAmt", row.getTotAmt());
          createSrcRow.setAttribute("VhclNo",
                                    (row.getReqId().equals("C") || row.getReqId().equals("T"))? "customervehicle":
                                    null);
          vo1.insertRow(createSrcRow);
          totalGrossWt = totalGrossWt.add(row.getGrossWt());
          totalBalWt = totalBalWt.add(row.getBalanceWt());
          this.getDBTransaction().postChanges();
          try
          {
            Object o =
              ADFModelUtils.callFunction(this,
                                         new StringBuilder("SLS.FN_INS_TRNP_BULK_LR_ITM_BCK(?,?,?,?,?,?,?,?,?,?)"),
                                         new Object[]
            {
              EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
              EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR(), Doc_Id, null, null, typeId, null
            }, Types.INTEGER);
          }
          catch (Exception e)
          {
            e.printStackTrace();
          }
        }
    }
    else if (typeId == 5237)
    {
      /**
               * Modified by : Manjeet Singh
               * Modified on : 13-10-2023
               * Remarks :  This case added to polpualte item for TransferOrder
               * TMS ID : 128922
            **/


      if (TrfList.size() > 0)
        for (BulkTrfList row: TrfList)
        {

          Row createSrcRow = vo1.createRow();
          createSrcRow.setAttribute("SrcDocId", row.getDocId());
          createSrcRow.setAttribute("SrcDocDt", row.getDocDt());
          createSrcRow.setAttribute("EoId", row.getEoId());
          createSrcRow.setAttribute("VehicleTyp", row.getVhclId());
          createSrcRow.setAttribute("LocId", row.getLocationId());
          createSrcRow.setAttribute("RouteDocId", row.getRouteId());
          createSrcRow.setAttribute("GrossWt", row.getGrossWt());
          createSrcRow.setAttribute("ReqTyp", row.getReqId());

          createSrcRow.setAttribute("DlvDt", row.getDlvDt());
          /**
                  * Added by : Manjeet Singh
                  * Modified on : 10-01-2023
                  * Remarks : Warehouse must be compare with 0 also.
                  * TMS ID : l
                  **/
          if (row.getWhId() != null && !row.getWhId().equals("0"))
            createSrcRow.setAttribute("WhId", row.getWhId());
//             createSrcRow.setAttribute("WhId", "WH00034");
          else
            createSrcRow.setAttribute("WhId", "WH00001");
          createSrcRow.setAttribute("DlvSchdlNo", new Integer(1));

          createSrcRow.setAttribute("ArrivalPnt", row.getArvlPnt());
          createSrcRow.setAttribute("DeparturePnt", row.getDprtPnt());
          createSrcRow.setAttribute("TotBndl", row.getTrfQty());
          createSrcRow.setAttribute("TotAmt", 0);
          createSrcRow.setAttribute("VhclNo",
                                    (row.getReqId().equals("C") || row.getReqId().equals("T"))? "customervehicle":
                                    null);
          createSrcRow.setAttribute("BtoDocId", row.getDocId());
          vo1.insertRow(createSrcRow);
          totalGrossWt = totalGrossWt.add(row.getGrossWt());
          totalBalWt = totalBalWt.add(row.getBalanceWt());
        }
      this.getDBTransaction().postChanges();
      try
      {
        Object o =
          ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_INS_TRNP_BULK_LR_ITM_BCK(?,?,?,?,?,?,?,?,?,?)"),
                                     new Object[]
        {
          EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
          EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR(), Doc_Id, null, null, typeId, null
        }, Types.INTEGER);
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
      ViewObjectImpl vo5 = this.getSlsTrnpBulkVrSummVO1();
      vo5.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
      vo5.setNamedWhereClauseParam("BindDocId", Doc_Id);
      vo5.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
      vo5.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
      vo5.executeQuery();
    }
    /**
           Till Here
          **/

    vo1.executeQuery();

    this.getSlsTrnpBulkVrItm1().executeQuery();
    vo3.executeQuery();
    vo1.setRangeSize(-1);
    // vo2.getCurrentRow().setAttribute("TransTotalGrossWt", totalGrossWt);
    //vo2.getCurrentRow().setAttribute("TransTotalBalanceWt", totalBalWt);
    SoList.clear();
    TrfList.clear();

  }


  public oracle.jbo.domain.Number getTotalGrossWtVal()
  {
    /**
         * Commented By : Bhanu PS
         * Commented On : 15.06.2019
         *              : below Code is commented as per the requirements of KML
         *
         * */
    oracle.jbo.domain.Number totalGrossWtVal = StaticValue.NUMBER_ZERO;
    //        oracle.jbo.domain.Number grossVal = StaticValue.NUMBER_ZERO;
    //        ViewObjectImpl vo1 = this.getSlsTrnpBulkVrSrc1();
    //        ViewObjectImpl vo2 = this.getTrnpBulkSoView1();
    //        Row[] r = vo1.getAllRowsInRange();
    //        if (r.length > 0) {
    //            for (Row row : r) {
    //                grossVal = (oracle.jbo.domain.Number) row.getAttribute("GrossWt");
    //                totalGrossWtVal = totalGrossWtVal.add(grossVal);
    //            }
    //        } else {
    //            Row[] rview = vo2.getAllRowsInRange();
    //            System.out.println("++++++++++++= inside else " + rview.length);
    //            if (rview.length > 0) {
    //                for (Row row : rview) {
    //
    //                    String ChkSelect = (String) row.getAttribute("TransChkSelect");
    //                    System.out.println("ChkSelect" + ChkSelect);
    //                    if (ChkSelect != null && ChkSelect.equalsIgnoreCase("Y")) {
    //                        grossVal = (oracle.jbo.domain.Number) row.getAttribute("StdWeight");
    //                        totalGrossWtVal = totalGrossWtVal.add(grossVal);
    //                    }
    //                }
    //                this.getSlsTrnpBulkVr1().getCurrentRow().setAttribute("TransTotalGrossWt", totalGrossWtVal);
    //            }
    //        }
    return totalGrossWtVal;
  }


  public String validateSoList()
  {
//    System.err.println("_____________Inside validateSoList___________________");
    ViewObject rmaVo = this.getSlsTrnpBulkVr1();
    Integer typeId = (Integer) rmaVo.getCurrentRow().getAttribute("DocTypId");
//    System.err.println("_____________Inside validateSoList________typeId___________" + typeId);
    if (typeId == 2341 || typeId == 2342)
    {
      ViewObjectImpl vo = this.getTrnpBulkSoView1();
      vo.setRangeSize(-1);
      Row[] r = vo.getAllRowsInRange();
      for (Row row: r)
      {

        Object chk = row.getAttribute("TransChkSelect");
        // System.out.println("chk Val get ::" + chk);
        Object routChk = row.getAttribute("TransRoutTyp");
        //System.out.println("Route Type GGet ::" + routChk);
        String chk_val = chk == null? "N": chk == "Y"? "Y": chk == true? "Y": "N";
        // System.out.println("Chk val get 111::" + chk_val);
        if (chk_val != null && chk_val.equalsIgnoreCase("Y"))
        {
          //System.out.println("In chk val case + "+typeId);
          if (typeId == 2341)
          {
            // System.out.println("in 2341 case");
            String docId = row.getAttribute("DocId").toString();
            //                    String whId = row.getAttribute("WhId").toString();

            if (SoList.size() > 0)
            {
              // System.out.println("in bulkSoList case");
              for (BulkSoList chkRow: SoList)
              {
                //System.out.println("docId:" + docId + "chkRow.getDocId()" + chkRow.getDocId());
                //                            if (docId != null && chkRow.getDocId() != null && whId!=null && chkRow.getWhId()!=null &&
                //                                chkRow.getDocId().toString().equals(docId) && chkRow.getWhId().toString().equals(whId))

                if (docId != null && chkRow.getDocId() != null && chkRow.getDocId().toString().equals(docId))
                {
                  ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.17635"),
                    //"Please Select another value",
                    ADFModelUtils.resolvRsrc("MSG.17740"), //"Sales Order Already added to list!!",
                    FacesMessage.SEVERITY_WARN);
                  return "N";
                }
              }
            }

            else if (routChk == null)
            {
              ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.17741"),
                //"Please Select Route for checked Sales Order",
                ADFModelUtils.resolvRsrc("MSG.17742"), //"Route is required to add!!",
                FacesMessage.SEVERITY_WARN);
              return "N";
            }
          }
          else if (typeId == 2342)
          {
            String docId = row.getAttribute("DocId").toString();
            if (SoList.size() > 0)
            {
              for (BulkSoList chkRow: SoList)
              {
                //                            System.out.println("docId:" + docId + "chkRow.getDocId()" + chkRow.getDocId());
                if (docId != null && chkRow.getDocId() != null && chkRow.getDocId().toString().equals(docId))
                {
                  ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.17635"),
                    //"Please Select another value",
                    ADFModelUtils.resolvRsrc("MSG.17743") + " !!", //"RMA Already added to list!!",
                    FacesMessage.SEVERITY_WARN);
                  return "N";
                }
              }
            }

            else if (routChk == null)
            {
              ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.17744"),
                //"Please Select Route for checked RMA",
                ADFModelUtils.resolvRsrc("MSG.17742"), // "Route is required to add!!",
                FacesMessage.SEVERITY_WARN);
              return "N";
            }
          }
          /** Code Added By Manjeet    **/
          else if (typeId == 915)
          {
//            System.err.println("_____________Inside validateSoList_____when ___typeId__is transfer Order_________" +
//                               typeId);
            ViewObjectImpl vo3 = this.getTrnpBulkTrfViewVO1();
            vo3.setRangeSize(-1);
            Row[] r1 = vo3.getAllRowsInRange();
            for (Row row1: r1)
            {

              Object chk1 = row1.getAttribute("TransChkSelect");
//              System.err.println("_____________Inside validateSoList_____chk1________" + chk1);

              String chk_val1 = chk1 == null? "N": chk1 == "Y"? "Y": chk1 == true? "Y": "N";
              if (chk_val1 != null && chk_val1.equalsIgnoreCase("Y"))
              {
                String docId1 = row.getAttribute("DocId").toString();
//                System.err.println("_____________Inside validateSoList_____docId1________" + docId1);
//                System.err.println("_____________Inside validateSoList_____TrfList.size()_______" + TrfList.size());
                if (TrfList.size() > 0)
                {
                  for (BulkTrfList chkRow: TrfList)
                  {
//                    System.err.println("_____________Inside validateSoList_____chkRow.getDocId()_______" +
//                                       chkRow.getDocId());
                    if (docId1 != null && chkRow.getDocId() != null && chkRow.getDocId().toString().equals(docId1))
                    {
                      ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.14112"),
                        //"Please Select another value",
                        ADFModelUtils.resolvRsrc("MSG.14112") + " !!", //"RMA Already added to list!!",
                        FacesMessage.SEVERITY_WARN);
                      return "N";
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else if (typeId == 5237)
    {
//      System.err.println("_____________Inside validateSoList_____when ___typeId__is bulk transfer Order_________" +
//                         typeId);
      ViewObjectImpl vo4 = this.getTrnpBulkTransferNewVo1();
      vo4.setRangeSize(-1);
      Row[] r1 = vo4.getAllRowsInRange();
      for (Row row1: r1)
      {

        Object chk1 = row1.getAttribute("TransDocSelect");
//        System.err.println("_____________Inside validateSoList_____chk1________" + chk1);

        String chk_val1 = chk1 == null? "N": chk1 == "Y"? "Y": chk1 == true? "Y": "N";
        if (chk_val1 != null && chk_val1.equalsIgnoreCase("Y"))
        {
          String docId1 = row1.getAttribute("DocId").toString();
//          System.err.println("_____________Inside validateSoList_____docId1________" + docId1);
//          System.err.println("_____________Inside validateSoList_____TrfList.size()_______" + TrfList.size());
          if (TrfList.size() > 0)
          {
            for (BulkTrfList chkRow: TrfList)
            {
//              System.err.println("_____________Inside validateSoList_____chkRow.getDocId()_______" + chkRow.getDocId());
              if (docId1 != null && chkRow.getDocId() != null && chkRow.getDocId().toString().equals(docId1))
              {
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.14112"),
                  //"Please Select another value",
                  ADFModelUtils.resolvRsrc("MSG.14112") + " !!", //"RMA Already added to list!!",
                  FacesMessage.SEVERITY_WARN);
                return "N";
              }
            }
          }
        }
      }
    }

    return "Y";
  }


  public void addListOfOrders()
  {
    //    System.err.println("_____________Inside addListOfOrders___________________");
    if (validateSoList().equalsIgnoreCase("Y"))
    {
      //      System.err.println("_____________Inside addListOfOrders____when validateSoList is Y_______________");
      getSoList().clear();
      getTrfList().clear();
      // List<Object> list = new ArrayList<Object>();
      ViewObjectImpl vo = this.getTrnpBulkSoView1();
      ViewObjectImpl vo1 = this.getSlsTrnpBulkVr1();
      ViewObjectImpl vo2 = this.getTrnpBulkTrfViewVO1();
      ViewObjectImpl vo3 = this.getTrnpBulkTransferNewVo1();
      Integer typeId = (Integer) vo1.getCurrentRow().getAttribute("DocTypId");
      /**
                         * Modified by : Manjeet Singh
                         * Modified on : 13-10-2023
                         * Remarks :  This case added to polpualte data for TransferOrder
                         * TMS ID : 128922
                         * */

      if (typeId == 5237)
      {
        vo3.setRangeSize(-1);
        Row[] r = vo3.getAllRowsInRange();
        //        System.err.println("_____________Inside addListOfOrders____when typeId IS Transfer Order_____________"+r.length);
        for (Row row: r)
        {
          Object chk = row.getAttribute("TransDocSelect");
//                    System.err.println("_____________Inside addListOfOrders___chk_____________"+chk);

          if (chk != null && chk.equals("true"))
          {

            BulkTrfList c =
              new BulkTrfList((String) row.getAttribute("TrfNo"), (String) row.getAttribute("DocId"), null,
                              (String) vo1.getCurrentRow().getAttribute("TransReqType"),
                              (String) vo1.getCurrentRow().getAttribute("TransReqTypeId"), null, null,
                              (String) vo1.getCurrentRow().getAttribute("TransVhclType"),
                              (Integer) vo1.getCurrentRow().getAttribute("TransVhclTypeId"), null, null,
                              (oracle.jbo.domain.Timestamp) row.getAttribute("DocDt"), (Integer) 0,
                              new oracle.jbo.domain.Number(0), (oracle.jbo.domain.Timestamp) row.getAttribute("DocDt"),
                              (String) row.getAttribute("WhIdDest"), (Integer) new Integer(1), (String) null,
                              (String) null, new oracle.jbo.domain.Number(0),
                              (oracle.jbo.domain.Number) row.getAttribute("LrBalQty"), new oracle.jbo.domain.Number(0));


            getTrfList().add(c);

            row.setAttribute("TransDocSelect", false);
          }
        }
      }


      /**  ******************* Till Here ************************  **/
      else
      {

        //        System.err.println("_____________Inside addListOfOrders____when typeId IS not Transfer Order_____________");
        vo.setRangeSize(-1);
        Row[] r = vo.getAllRowsInRange();
        for (Row row: r)
        {

          // System.out.println(" +++++++++ SO_DOC_ID : " + (String) row.getAttribute("DocId"));


          Object chk = row.getAttribute("TransChkSelect");
          //                System.out.println("value of chkSlect ::" + chk);
          String chk_val = chk == null? "N": chk == "Y"? "Y": chk == true? "Y": "N";
          if (chk_val != null && chk_val.equalsIgnoreCase("Y"))
          {
            String whId = null;

            if (typeId == 2341)
            {

              ViewObject soVo = this.getLovSlsSoWh1();

              soVo.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
              soVo.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
              soVo.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
              //                                    soVo.setNamedWhereClauseParam("BindSlcId ", EbizParams.GLBL_APP_SERV_LOC());
              soVo.setNamedWhereClauseParam("BindDocId", row.getAttribute("DocId"));
              soVo.executeQuery();
              Row soRw[] = soVo.getAllRowsInRange();
              //                System.out.println("+++++++++++ Rows in SO : " + soRw.length);
              if (soRw.length > 0)
              {

                whId = (String) soRw[0].getAttribute("WhId");
                //                    System.out.println(" ===== WH ID : " + whId);
              }

              BulkSoList c =
                new BulkSoList((String) row.getAttribute("SoId"), (String) row.getAttribute("DocId"),
                               (String) row.getAttribute("TransEoNm"),
                               (String) vo1.getCurrentRow().getAttribute("TransReqType"),
                               (String) vo1.getCurrentRow().getAttribute("TransReqTypeId"),
                               (String) row.getAttribute("TransRoutTyp"),
                               (String) row.getAttribute("TransRoutTypId") == null?
                               (String) row.getAttribute("RouteId"): (String) row.getAttribute("TransRoutTypId"), //TransRoutTypId
                               (String) vo1.getCurrentRow().getAttribute("TransVhclType"),
                               (Integer) vo1.getCurrentRow().getAttribute("TransVhclTypeId"),
                               (String) row.getAttribute("TransLocNm"), (String) row.getAttribute("ArrivalLocId"),
                               (oracle.jbo.domain.Timestamp) row.getAttribute("DocDt"),
                               (Integer) row.getAttribute("EoId"),
                               (oracle.jbo.domain.Number) row.getAttribute("TransGrossWt"),
                               (oracle.jbo.domain.Timestamp) row.getAttribute("DlvDt"), whId,
                               //(String) row.getAttribute("WhId"),
                               (Integer) row.getAttribute("DlvSchdlNo"), (String) row.getAttribute("ArrivalLocId"),
                               (String) row.getAttribute("DepartLocId"),
                               (oracle.jbo.domain.Number) row.getAttribute("TransBalanceWt"),
                               (oracle.jbo.domain.Number) row.getAttribute("SalesItmQty"),
                               (oracle.jbo.domain.Number) row.getAttribute("TotAmtBs"));
              getSoList().add(c);

              row.setAttribute("TransChkSelect", false);

            }
            else if (typeId == 2342)
            {

              /**
                           * Modified by : Surender Kumar
                           * Modified on : 26-11-2018
                           * Remarks :  This case added List of RMA
                           * TMS ID : 63372
                        **/
              whId = null;

              ViewObject rmaVo = this.getLovRmaWhIdVO1();
              rmaVo.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
              rmaVo.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
              rmaVo.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
              rmaVo.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC()); //BindSlocId
              rmaVo.setNamedWhereClauseParam("BindDocId", row.getAttribute("DocId"));
              rmaVo.executeQuery();
              Row rmaRw[] = rmaVo.getAllRowsInRange();
              if (rmaRw.length > 0)
              {
                whId = (String) rmaRw[0].getAttribute("WhId");

              }
              BulkSoList rma =
                new BulkSoList((String) row.getAttribute("SoId"), (String) row.getAttribute("DocId"),
                               (String) row.getAttribute("TransEoNm"),
                               (String) vo1.getCurrentRow().getAttribute("TransReqType"),
                               (String) vo1.getCurrentRow().getAttribute("TransReqTypeId"),
                               (String) row.getAttribute("TransRoutTyp"),
                               (String) row.getAttribute("TransRoutTypId") == null?
                               (String) row.getAttribute("RouteId"): (String) row.getAttribute("TransRoutTypId"),
                               (String) vo1.getCurrentRow().getAttribute("TransVhclType"),
                               (Integer) vo1.getCurrentRow().getAttribute("TransVhclTypeId"),
                               (String) row.getAttribute("TransLocNm"), (String) row.getAttribute("ArrivalLocId"),
                               (oracle.jbo.domain.Timestamp) row.getAttribute("DocDt"),
                               (Integer) row.getAttribute("EoId"),
                               (oracle.jbo.domain.Number) row.getAttribute("TransGrossWt"),
                               (oracle.jbo.domain.Timestamp) row.getAttribute("DlvDt"), whId,
                               //(String) row.getAttribute("WhId"),
                               new Integer(1), (String) row.getAttribute("ArrivalLocId"),
                               (String) row.getAttribute("DepartLocId"),
                               (oracle.jbo.domain.Number) row.getAttribute("TransBalanceWt"),
                               (oracle.jbo.domain.Number) row.getAttribute("SalesItmQty"),
                               (oracle.jbo.domain.Number) row.getAttribute("TotAmtBs"));
              getSoList().add(rma);

              row.setAttribute("TransChkSelect", "N");
            }

          }


        }
      }
    }

    // return  list;
  }

  public void searchBulkLR()
  {

    Row currentRow = this.getSearchParamDual1().getCurrentRow();
    //        System.out.println("value get fo Doc ID =" + currentRow.getAttribute("TransDispDocId"));
    ViewObjectImpl impl = this.getSearchBulkLR1();
    impl.setNamedWhereClauseParam("bindCldId", EbizParams.GLBL_APP_CLD_ID());
    impl.setNamedWhereClauseParam("bindDocId", currentRow.getAttribute("TransDispDocId"));
    impl.setNamedWhereClauseParam("bindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
    impl.setNamedWhereClauseParam("bindOrgId", EbizParams.GLBL_APP_USR_ORG());
    impl.setNamedWhereClauseParam("bindSlocId", EbizParams.GLBL_APP_SERV_LOC());
    impl.setNamedWhereClauseParam("BindDocTyp", currentRow.getAttribute("TransDocTypeId"));
    impl.setNamedWhereClauseParam("BindLangId", EbizParams.GLBL_LANG_ID());
    /**

           * Modified by : Surender Kumar

           * Modified on : 07-09-2018

           * Remarks : Filter Bulk Lr data on the basis of Start Dt and End Dt

           * TMS ID : 63436

           **/
    impl.setNamedWhereClauseParam("BindStDt", currentRow.getAttribute("TransStDt"));
    impl.setNamedWhereClauseParam("BindEndDt", currentRow.getAttribute("TransEndDt"));
    impl.setNamedWhereClauseParam("BindModId", currentRow.getAttribute("TransModeId"));

    /**
         * TMS ID      : 89471
         * Modified By : BHANU PS
         * Modified On : 29.08.2019
         *
         * ***************** STARTED **************
         * */
    impl.setNamedWhereClauseParam("BindEoId", currentRow.getAttribute("TransEoId"));
    impl.setNamedWhereClauseParam("BindSoDocId", currentRow.getAttribute("TransSoDocId"));
    impl.setNamedWhereClauseParam("BindRmaDocId", currentRow.getAttribute("TransRmaDocId"));
    impl.setNamedWhereClauseParam("BindLrDocId", currentRow.getAttribute("TransLrDocId"));
    impl.setNamedWhereClauseParam("BindVsDocId", currentRow.getAttribute("TransSchdlDocId"));
    impl.setNamedWhereClauseParam("BindLrStatus", currentRow.getAttribute("TransStatusId"));
    impl.setNamedWhereClauseParam("BindBvrTyp", currentRow.getAttribute("TransBVRDocType"));
    /**
         * ****************** END ******************
         * */

    impl.executeQuery();

  }

  public void resetBulkLR()
  {

    ViewObjectImpl impl = this.getSearchBulkLR1();
    impl.setNamedWhereClauseParam("bindCldId", null);
    impl.setNamedWhereClauseParam("bindDocId", null);
    impl.setNamedWhereClauseParam("bindHoOrgId", null);
    impl.setNamedWhereClauseParam("bindOrgId", null);
    impl.setNamedWhereClauseParam("bindSlocId", null);
    impl.setNamedWhereClauseParam("BindDocTyp", null);
    impl.setNamedWhereClauseParam("BindModId", null);
    /********************** */
    impl.setNamedWhereClauseParam("BindEoId", null);
    impl.setNamedWhereClauseParam("BindSoDocId", null);
    impl.setNamedWhereClauseParam("BindLrDocId", null);
    impl.setNamedWhereClauseParam("BindVsDocId", null);
    impl.setNamedWhereClauseParam("BindLrStatus", null);
      impl.setNamedWhereClauseParam("BindBvrTyp", null);
    /********************** */
    impl.executeQuery();

    this.getSearchParamDual1().executeQuery();

    //        Row currentRow = this.getSearchParamDual1().getCurrentRow();
    //        currentRow.setAttribute("TransDrftDispId", null);
    //        /**
    //
    //           * Modified by : Surender Kumar
    //
    //           * Modified on : 07-09-2018
    //
    //           * Remarks : Filter Bulk Lr data on the basis of Start Dt and End Dt
    //
    //           * TMS ID : 63436
    //
    //           **/
    //        currentRow.setAttribute("TransStDt", null);
    //        currentRow.setAttribute("TransEndDt", null);

  }

  /**
   * To filter data with docid when viewing data
   */
  public void setSelectDocIdOnViewPage()
  {
//    System.err.println("_____________-inside setSelectDocIdOnViewPage________");
    setnullOnAddPage();
    getSlsTrnpBulkVr1().setRangeSize(-1);
    String Docid = null;
    SlsTrnpBulkVrVOImpl impl = this.getSlsTrnpBulkVr1();
    try
    {

      Object docIdParam = ADFModelUtils.resolvEl("#{pageFlowScope.DocId}");

      Docid = docIdParam == null? null: docIdParam.toString();

      //            System.out.println("value of docId is :" + Docid);
    }
    catch (Exception e)
    {
      ADFModelUtils.showFacesMessage(ADFModelUtils.resolvRsrc("MSG.2151"),
                                     ADFModelUtils.resolvRsrc("MSG.15924") + " 'SlsTrnpBulkVhclReqTF' ! ",
                                     FacesMessage.SEVERITY_ERROR, null);
    }
    impl.setbindCldId(EbizParams.GLBL_APP_CLD_ID());
    impl.setbindSlocId(EbizParams.GLBL_APP_SERV_LOC());
    impl.setbindOrgId(EbizParams.GLBL_APP_USR_ORG());
    impl.setbindHoOrgId(EbizParams.GLBL_HO_ORG_ID());
//    System.err.println("_____________-inside setSelectDocIdOnViewPage__1106______");
    if (Docid != null)
    {
      impl.setbindDocId(Docid);
      impl.executeQuery();
    }
    ViewObjectImpl vo5 = this.getSlsTrnpBulkVrSummVO1();
      vo5.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
      vo5.setNamedWhereClauseParam("BindDocId", Docid);
      vo5.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_HO_ORG_ID());
      vo5.setNamedWhereClauseParam("BindSlocId",EbizParams.GLBL_APP_SERV_LOC());
      vo5.executeQuery();
      
//    System.err.println("_____________-inside setSelectDocIdOnViewPage__1117______");
  }


  /**
   * To filter data with null
   */
  public void setnullOnAddPage()
  {
    //        this.getDBTransaction().rollback();
    //        SlsTrnpBulkVrVOImpl impl = this.getSlsTrnpBulkVr1();
    //        impl.setbindCldId(null);
    //        impl.setbindSlocId(null);
    //        impl.setbindOrgId(null);
    //        impl.setbindHoOrgId(null);
    //        impl.setbindDocId(null);
    //        impl.executeQuery();

    ViewObjectImpl vo = getSlsTrnpBulkVr1();
    ViewCriteria vc = vo.getViewCriteria("SlsTrnpBulkVrVOCriteria");
    vo.applyViewCriteria(vc);
    vo.setNamedWhereClauseParam("bindCldId", null);
    vo.setNamedWhereClauseParam("bindDocId", null);
    vo.setNamedWhereClauseParam("bindHoOrgId", null);
    vo.setNamedWhereClauseParam("bindOrgId", null);
    vo.setNamedWhereClauseParam("bindSlocId", null);
    vo.executeQuery();
    
    ViewObjectImpl vo5 = this.getSlsTrnpBulkVrSummVO1();
       vo5.setNamedWhereClauseParam("BindCldId", -1);
       vo5.setNamedWhereClauseParam("BindDocId", -1);
       vo5.setNamedWhereClauseParam("BindOrgId", -1);
       vo5.setNamedWhereClauseParam("BindSlocId", -1);
       vo5.executeQuery();
    ViewObjectImpl vo3 = this.getTrnpBulkTrfViewVO1();
    vo3.setNamedWhereClauseParam("BindOrgId", -1);
    vo3.setNamedWhereClauseParam("BindSlocId", -1);
    vo3.setNamedWhereClauseParam("BindCldId", -1);
    vo3.setNamedWhereClauseParam("BindStDt", null);
    vo3.setNamedWhereClauseParam("BindEndDt", null);
    ViewObjectImpl Vo4 = this.getTrnpBulkTransferNewVo1();
    Vo4.setNamedWhereClauseParam("BindOrgId", -1);
    Vo4.setNamedWhereClauseParam("BindSlocId", -1);
    Vo4.setNamedWhereClauseParam("BindCldId", -1);
    Vo4.setNamedWhereClauseParam("BindStDt", null);
    Vo4.setNamedWhereClauseParam("BindEndDt", null);
    Vo4.setNamedWhereClauseParam("bindTrfType", -1);
    Vo4.executeQuery();
    SoList.clear();

  }

  public void createInsertSoBulkHdr()
  {
    setnullOnAddPage();
    SlsTrnpBulkVrVOImpl impl = this.getSlsTrnpBulkVr1();

    //        System.out.println("Before create Row");
    Row row = impl.createRow();
    //        System.out.println("after create Row " + row);
    impl.insertRow(row);
    impl.setNamedWhereClauseParam("bindDocId", row.getAttribute("DocId"));
    impl.executeQuery();
    this.resetBulkSo();

  }


  public Integer validateReqValue()
  {
    Integer i = 0;
    SlsTrnpBulkVrVOImpl impl = this.getSlsTrnpBulkVr1();
    Row r = impl.getCurrentRow();
    if (r.getAttribute("TransReqType") == null)
    {
      i = 1;
      return i;
    }
    else if (r.getAttribute("TransCageName") == null)
    {
      i = 2;
      return i;
    }
    //        if(r.getAttribute("TransRouteName") == null){
    //            i = 2;
    //            return i;
    //        }
    //        else if(r.getAttribute("TransLocNm") == null){
    //            i = 3;
    //            return i;
    //        }

    /**
         * TMS ID : 80455
         * Modified By : Bhanu PS
         * Changes Done : Below Code has been commented,
         *                  So that Vehicle type should be non-mandatory
         * */
    //        else if (r.getAttribute("TransVhclType") == null) {
    //            i = 4;
    //            return i;
    //        }
    return i;
  }

  /*Created On:- 19-11-2018
     * Created By:- Akhil Shandilya
     * Remarks:- To cancel existing LR aginst vehicle request
     * */
  public void cancelOldBulkRequest()
  {
    ViewObjectImpl vo2 = this.getSlsTrnpBulkVr1();
    String DocId = (String) vo2.getCurrentRow().getAttribute("DocId");
    Number n = new Number(0);
    if (DocId != null)
    {
      this.getDBTransaction().postChanges();
      try
      {
        Object ob =
          ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_TRNP_AMND_BLK_LR(?,?,?,?,?,?)"), new Object[]
        {
          EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
          EbizParams.GLBL_HO_ORG_ID(), DocId, "Y"
        }, Types.NUMERIC);
        n = new Number(ob);
        this.getDBTransaction().commit();
        //                System.out.println("return value from fuc in case of cncel =" + ob);

        if (n.compareTo(new Number(2)) == 0)
        {
          ADFModelUtils.showFormattedFacesMessage(null, ADFModelUtils.resolvRsrc("MSG.17745"), //"VEHICLE REQUEST NUMBER NOT GENERATED",
                                                  FacesMessage.SEVERITY_INFO);
        }
        else if (n.compareTo(new Number(5)) == 0)
        {
          ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.17746"),
            //"Can'nt Cancelled this Vehicle Request",
            ADFModelUtils.resolvRsrc("MSG.17747"),
            //"This Document is already used in another Application.",
            FacesMessage.SEVERITY_INFO);
        }
        else
        {
          ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("LBL.8003"), //"Cancelled",
            ADFModelUtils.resolvRsrc("MSG.17748"), //"Vehicle Request Cancelled Successfully.",
            FacesMessage.SEVERITY_INFO);
        }
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }

    }
    vo2.executeQuery();
  }


  public static synchronized void generateBulkRequest(TrnpBulkVhclReqAMImpl am)
  {
    //System.out.println("value in fun");
    ViewObjectImpl vo = am.getSlsTrnpBulkVr1();
    Row row = vo.getCurrentRow();
    Integer docTypeId = (Integer) row.getAttribute("DocTypId");
    // System.out.println("docTypeId get =" + docTypeId);
    // Row[] r = vo.getAllRowsInRange();
    //  for(Row row:r){
    //System.out.println("value of parameter" + row.getAttribute("DocId") + row.getAttribute("CurrIdSp") +
    //  row.getAttribute("CurrConvFctr"));
    String freezeVal =
      row.getAttribute("Freeze") == null? "N": ((String) row.getAttribute("Freeze")).equalsIgnoreCase("Y")? "Y": "N";
    //System.out.println("freezeval" + freezeVal + "from row" + row.getAttribute("Freeze"));
    String docId = (String) row.getAttribute("DocId");
    if (freezeVal.equalsIgnoreCase("N"))
    {
      try
      {
        String i =
          (String) ADFModelUtils.callFunction(am, new StringBuilder("SLS.FN_INS_BULK_VC_REQ_KML(?,?,?,?,?,?,?,?)"),
                                              new Object[]
        {
          EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
          EbizParams.GLBL_HO_ORG_ID(), row.getAttribute("DocId"), row.getAttribute("CurrIdSp"),
          row.getAttribute("CurrConvFctr"), docTypeId
        }, Types.VARCHAR);

//        System.err.println("__________SLS.FN_INS_BULK_VC_REQ_KML____will return _" + i);
        //System.out.println("value of i is : " + i);
        if (i != null && !i.equalsIgnoreCase("N"))
        {

          if (i.equalsIgnoreCase("D"))
          {
            ADFModelUtils.showFacesMessage("Stock Take is on-going for current BVR ITEMS.\n" +
                                           "You are not allowed to perfrom any stock transaction. Please try after stock Take is Complete.",
                                           null, FacesMessage.SEVERITY_INFO, null);
            return;
          }
          else
          {
            vo.getCurrentRow().setAttribute("Freeze", "Y");
          }
        }
        /*
 * REMARKS : To Check either send notification or not.
 * */

        /*
 FN_WMS_BVR_NTFN_ALLOW
 * */
        //                System.out.println("=----------------- calling FN_WMS_BVR_NTFN_ALLOW ==--= doc id " +
        //                                   row.getAttribute("DocId"));
        String x =
          (String) ADFModelUtils.callFunction(am, new StringBuilder("SLS.FN_WMS_BVR_NTFN_ALLOW(?,?,?,?,?)"),
                                              new Object[]
        {
          EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
          EbizParams.GLBL_HO_ORG_ID(), row.getAttribute("DocId")
        }, Types.VARCHAR);
//        System.err.println("_________FN_WMS_BVR_NTFN_ALLOW____will return _" + x);
        //System.out.println(" = == = = = = = return value :: " + x);
        if (x.equals("Y"))
        {
                              am.sendNotification();
        }

        /**
                 * Send regular Notification. For Vehicle Schedule is pending For Pick.
                 *
                 * */
        String op =
          (String) ADFModelUtils.callFunction(am, new StringBuilder("SLS.FN_TRNP_GET_VHCL_NO(?,?,?,?,?)"), new Object[]
        {
          EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
          EbizParams.GLBL_HO_ORG_ID(), row.getAttribute("DocId")
        }, Types.VARCHAR);

//        System.err.println("_________FN_TRNP_GET_VHCL_NO__will return _" + op);
        if (op != null)
        {
          String[] generatedSchdl = op.split(",");
//          System.err.println("_________generatedSchdl _" + generatedSchdl.length);
          //System.out.println(" ======== Length of generatedSchdl : "+generatedSchdl.length);
          if (generatedSchdl.length > 0)
          {
            for (int j = 0; j < generatedSchdl.length; j++)
            {
              //System.out.println(" Schdl Doc Id " + i + " = " + generatedSchdl[j]);
                                          am.sendRegularNotification(generatedSchdl[j]);
            }
          }
        }
        am.getDBTransaction().commit();
        ADFModelUtils.showFacesMessage(ADFModelUtils.resolvRsrc("MSG.17749"), //"Loading Request Generated",
          i + "\n", FacesMessage.SEVERITY_INFO, null);
//        System.err.println("_____________value of i is_______________" + i);
        am.refreshMainView(docId);
        //vo.executeQuery();

      }
      catch (Exception e)
      {
        e.printStackTrace();
      }

    }
    else
    {
      ADFModelUtils.showFacesMessage(ADFModelUtils.resolvRsrc("MSG.17750"), //"Loading Request Already Generated",
        null, FacesMessage.SEVERITY_WARN, null);
    }
  }


  public String validateItemDetails()
  {
    ViewObjectImpl vo = this.getSlsTrnpBulkVrItmVO3();
    vo.setRangeSize(-1);
    ViewObjectImpl vo2 = this.getSlsTrnpBulkVrSrc1();
    String DocId = (String) vo2.getCurrentRow().getAttribute("DocId");
    Row[] r = vo2.getAllRowsInRange();
    if (r.length > 0)
    {
      for (Row row: r)
      {
        String rdoc = (String) row.getAttribute("SrcDocId");
        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("CldId ='" + EbizParams.GLBL_APP_CLD_ID() + "' AND SlocId = " +
                          EbizParams.GLBL_APP_SERV_LOC() + " AND HoOrgId = '" + EbizParams.GLBL_HO_ORG_ID() +
                          "' AND OrgId = '" + EbizParams.GLBL_APP_USR_ORG() + "' AND SrcDocId ='" + rdoc +
                          "' AND DocId ='" + DocId + "'");

        //                vo.setNamedWhereClauseParam("bindCldId", EbizParams.GLBL_APP_CLD_ID());
        //                vo.setNamedWhereClauseParam("bindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        //                vo.setNamedWhereClauseParam("bindOrgId", EbizParams.GLBL_APP_USR_ORG());
        //                vo.setNamedWhereClauseParam("bindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        //                vo.setNamedWhereClauseParam("bindDocId", DocId);
        //                vo.setNamedWhereClauseParam("bindSrcDocId", rdoc);
        //                vo.executeQuery();
        Row[] ritm = vo.getFilteredRows(rq);
        if (ritm.length <= 0)
        {
          // System.out.println(" = Item does not exist for some of the Dcoument ");
          ADFModelUtils.showFacesMessage(ADFModelUtils.resolvRsrc("LBL.4952"), //"Warning",
            ADFModelUtils.resolvRsrc("MSG.17751"), // "Item does not exist for some of the Dcoument",
            FacesMessage.SEVERITY_WARN, null);
          return "N";
        }
      }
    }


    //        Integer i = vldtAvlblStk();
    //
    //        if(i.compareTo(0) == 0){
    //            return "N";
    //        }

    //        this.saveBulkLrAction();
    //        ViewObjectImpl vr = this.getSlsTrnpBulkVr1();
    //        String dispId = (String)vr.getCurrentRow().getAttribute("DispId");
    //        System.out.println(" =============== Disp Id in Validate Item Details "+dispId);
    //        if(dispId == null){
    //            ADFModelUtils.showFacesMessage("", //"Warning",
    //                "Error in generating Display Id.", // "Item does not exist for some of the Dcoument",
    //                FacesMessage.SEVERITY_WARN, null);
    //            return "X";
    //        }
    return "Y";
  }

  public String checkSrcVo()
  {
    ViewObjectImpl vo = this.getSlsTrnpBulkVrSrc1();
    vo.setRangeSize(-1);
    if (vo.getEstimatedRowCount() > 0)
      return "Y";
    else
      return "N";
  }

  /**
   *Method to validate Item stock must be less than avalable stock;
   * @return
   * 0: error
   * 1: success
   */
  public Integer vldtAvlblStk()
  {
    Integer i = 0;
    ViewObjectImpl itmVo = this.getSlsTrnpBulkVrItm1();
    RowSetIterator itr = itmVo.createRowSetIterator(null);
    while (itr.hasNext())
    {
      SlsTrnpBulkVrItmVORowImpl itmR = (SlsTrnpBulkVrItmVORowImpl) itr.next();

      if (itmR.getTotQty().compareTo(itmR.getTransAvlblStk()) == 1)
      {
        ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.17752"),
          //"Invalid Item Quanties.",
          ADFModelUtils.resolvRsrc("MSG.17752") +
          //"Total Stock of Some items is more than Available Stock." +
          "<br>" + ADFModelUtils.resolvRsrc("MSG.17753") + ".", FacesMessage.SEVERITY_ERROR);
        i = 0;
      }
      else
      {
        i = 1;
      }
    }
    itr.closeRowSetIterator();

    return i;
  }


  public String deleteSalesOrderSrc(String SrcDocId)
  {

    ViewObjectImpl voItm = this.getSlsTrnpBulkVrItm1();
    Row[] row = voItm.getFilteredRows("SrcDocId", SrcDocId);

    if (row.length > 0)
    {
      for (Row r: row)
      {
        r.remove();
      }
      this.getDBTransaction().postChanges();
    }
    //        RowSetIterator itr = voItm.createRowSetIterator(null);
    //        while(itr.hasNext()){
    //            Row row = itr.next();
    //            row.remove();
    //        }
    //        ViewObjectImpl vo2 = this.getSlsTrnpBulkVrSrc1();
    //        String DocId = (String) vo2.getCurrentRow().getAttribute("DocId");
    //        vo.setNamedWhereClauseParam("bindCldId", EbizParams.GLBL_APP_CLD_ID());
    //        vo.setNamedWhereClauseParam("bindSlocId", EbizParams.GLBL_APP_SERV_LOC());
    //        vo.setNamedWhereClauseParam("bindOrgId", EbizParams.GLBL_APP_USR_ORG());
    //        vo.setNamedWhereClauseParam("bindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
    //        vo.setNamedWhereClauseParam("bindDocId", DocId);
    //        vo.setNamedWhereClauseParam("bindSrcDocId", SrcDocId);
    //        vo.executeQuery();
    //        Row[] ritm = vo.getAllRowsInRange();
    //        if (ritm.length > 0) {
    //            ADFModelUtils.showFacesMessage("Warning", "Item Exist for the Sales Order", FacesMessage.SEVERITY_WARN,
    //                                           null);
    //            return "N";
    //        }

    /**
 * Below Commented By : Bhanu Ps
 * Commented On  : 29.05.2019
 *              Below code is commented because while deleting Source Sales Order,
 *              we have deleted all the items associated with this SOURCE SO in above code.
 * */
    //        ViewObjectImpl vo = this.getSlsTrnpBulkVrItm1();
    //        Integer i = vo.getRowCount();
    //        System.out.println(" =================== +++++ "+i);
    //        if (i.compareTo(0) > 1) {
    //            ADFModelUtils.showFacesMessage(ADFModelUtils.resolvRsrc("LBL.4952"), //"Warning",
    //                ADFModelUtils.resolvRsrc("MSG.17754"), //"Item Exist for the Sales Order",
    //                FacesMessage.SEVERITY_WARN, null);
    //            return "N";
    //        }


    return "Y";
  }


  public String getFreezeVal()
  {
    String freeze = null;
    //        ViewObjectImpl vo = this.getSlsTrnpBulkVr1();
    //        freeze = (String) vo.getCurrentRow().getAttribute("Freeze");
    //        System.out.println("fereze val gte =" + freeze);
    //        if (freeze != null) {
    //            freeze = "Y";
    //        } else {
    //            freeze = "N";
    //        }
    return freeze;
  }

  //    public void saveBulkLrAction() {
  //        ViewObjectImpl vo = this.getSlsTrnpBulkVr1();
  //        Row r = vo.getCurrentRow();
  //        if (r != null && this.genBulkLrDispId() != null && r.getAttribute("DispId") == null) {
  //            r.setAttribute("DispId", this.genBulkLrDispId());
  //            r.setAttribute("DrftDispId", this.genBulkLrDispId());
  //        }
  //
  //    }


  public String saveBulkLrAction()
  {
    ViewObjectImpl vo = this.getSlsTrnpBulkVr1();
    Row r = vo.getCurrentRow();
    //System.out.println(" ======= r.getAttribute  "+r.getAttribute("DispId") +" == "+this.genBulkLrDispId());
    if (r != null && this.genBulkLrDispId() != null && r.getAttribute("DispId") == null)
    {
      r.setAttribute("DispId", this.genBulkLrDispId());
      r.setAttribute("DrftDispId", this.genBulkLrDispId());
      return "Y";
    }
    else if (r.getAttribute("DispId") != null)
    {
      return "Y";
    }
    //        else if(this.genBulkLrDispId() == null){
    //            r.setAttribute("DispId", this.genBulkLrDispId());
    //            r.setAttribute("DrftDispId", this.genBulkLrDispId());
    //            return "Y";
    //        }
    return "N";
  }

  /**
   * Method to Create Display Id and draft Display Id
   * TMS - 63982 , changed by Atul Gusain
   * @return
   */
  public synchronized String genBulkLrDispId()
  {
    String lrNo = null;
    try
    {
      lrNo =
        (String) ADFModelUtils.callFunction(this, new StringBuilder("SLS.TRNP_GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?,?)"),
                                            new Object[]
      {
        EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG(), 24266, null, null,
        "SLS$TRNP$BULK$VR", EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this), 0
      }, Types.VARCHAR);

      if (lrNo == null)
      {
        lrNo = "01XXXBVR";
      }
    }
    catch (Exception e)
    {
      ADFModelUtils.showFormattedFacesMessage("Error",
                                              ADFModelUtils.resolvRsrc("MSG.13855") + " SLS.TRNP_GEN_DISP_DOC_ID",
                                              FacesMessage.SEVERITY_ERROR);
      e.printStackTrace();
    }
    return lrNo;
  }

  /**
   * Container's getter for SlsTrnpBulkVr1.
   * @return SlsTrnpBulkVr1
   */
  public SlsTrnpBulkVrVOImpl getSlsTrnpBulkVr1()
  {
    return (SlsTrnpBulkVrVOImpl) findViewObject("SlsTrnpBulkVr1");
  }

  /**
   * Container's getter for SlsTrnpBulkVrSrc1.
   * @return SlsTrnpBulkVrSrc1
   */
  public ViewObjectImpl getSlsTrnpBulkVrSrc1()
  {
    return (ViewObjectImpl) findViewObject("SlsTrnpBulkVrSrc1");
  }

  /**
   * Container's getter for SlsTrnpBulkVrItm1.
   * @return SlsTrnpBulkVrItm1
   */
  public ViewObjectImpl getSlsTrnpBulkVrItm1()
  {
    return (ViewObjectImpl) findViewObject("SlsTrnpBulkVrItm1");
  }

  /**
   * Container's getter for BulkVrToBulkVrSrcVL1.
   * @return BulkVrToBulkVrSrcVL1
   */
  public ViewLinkImpl getBulkVrToBulkVrSrcVL1()
  {
    return (ViewLinkImpl) findViewLink("BulkVrToBulkVrSrcVL1");
  }

  /**
   * Container's getter for BulkVrSrcToBulkVrItmVL1.
   * @return BulkVrSrcToBulkVrItmVL1
   */
  public ViewLinkImpl getBulkVrSrcToBulkVrItmVL1()
  {
    return (ViewLinkImpl) findViewLink("BulkVrSrcToBulkVrItmVL1");
  }

  /**
   * Container's getter for LOVCustName1.
   * @return LOVCustName1
   */
  public LOVCustNameVOImpl getLOVCustName1()
  {
    return (LOVCustNameVOImpl) findViewObject("LOVCustName1");
  }

  /**
   * Container's getter for LovSoId1.
   * @return LovSoId1
   */
  public ViewObjectImpl getLovSoId1()
  {
    return (ViewObjectImpl) findViewObject("LovSoId1");
  }

  /**
   * Container's getter for TrnpBulkSoView1.
   * @return TrnpBulkSoView1
   */
  public ViewObjectImpl getTrnpBulkSoView1()
  {
    return (ViewObjectImpl) findViewObject("TrnpBulkSoView1");
  }

  public ViewObjectImpl getSlsTrnpBulkVrItmVO1()
  {
    return (ViewObjectImpl) findViewObject("SlsTrnpBulkVrItm1");
  }

  /**
   * Container's getter for LOVRoute1.
   * @return LOVRoute1
   */
  public LOVRouteVOImpl getLOVRoute1()
  {
    return (LOVRouteVOImpl) findViewObject("LOVRoute1");
  }

  /**
   * Container's getter for LOVReqTyp1.
   * @return LOVReqTyp1
   */
  public ViewObjectImpl getLOVReqTyp1()
  {
    return (ViewObjectImpl) findViewObject("LOVReqTyp1");
  }

  /**
   * Container's getter for LOVVhclType1.
   * @return LOVVhclType1
   */
  public ViewObjectImpl getLOVVhclType1()
  {
    return (ViewObjectImpl) findViewObject("LOVVhclType1");
  }

  /**
   * Container's getter for LOVLocationId1.
   * @return LOVLocationId1
   */
  public ViewObjectImpl getLOVLocationId1()
  {
    return (ViewObjectImpl) findViewObject("LOVLocationId1");
  }

  /**
   * Container's getter for SearchParamDual1.
   * @return SearchParamDual1
   */
  public SearchParamDualVOImpl getSearchParamDual1()
  {
    return (SearchParamDualVOImpl) findViewObject("SearchParamDual1");
  }

  /**
   * Container's getter for SearchBulkLR1.
   * @return SearchBulkLR1
   */
  public ViewObjectImpl getSearchBulkLR1()
  {
    return (ViewObjectImpl) findViewObject("SearchBulkLR1");
  }

  /**
   * Container's getter for SlsSoDlvSchdl1.
   * @return SlsSoDlvSchdl1
   */
  public ViewObjectImpl getSlsSoDlvSchdl1()
  {
    return (ViewObjectImpl) findViewObject("SlsSoDlvSchdl1");
  }

  /**
   * Container's getter for BulkVrItmToSoDlvSchdlVL1.
   * @return BulkVrItmToSoDlvSchdlVL1
   */
  public ViewLinkImpl getBulkVrItmToSoDlvSchdlVL1()
  {
    return (ViewLinkImpl) findViewLink("BulkVrItmToSoDlvSchdlVL1");
  }


  /**
   * Container's getter for LOVCurrId1.
   * @return LOVCurrId1
   */
  public ViewObjectImpl getLOVCurrId1()
  {
    return (ViewObjectImpl) findViewObject("LOVCurrId1");
  }

  public void setGrossStdWt(String itmUomBs, String itmUomSp, String itmid)
  {
    Number stdWt = new Number(0);

    ViewObjectImpl itmVo = this.getSlsTrnpBulkVrItm1();
    RowSetIterator itr = itmVo.createRowSetIterator(null);
    while (itr.hasNext())
    {
      SlsTrnpBulkVrItmVORowImpl ro = (SlsTrnpBulkVrItmVORowImpl) itr.next();
      try
      {
        Object tmpWt = ADFModelUtils.callFunction(this, new StringBuilder("fn_get_itm_wt_BLK(?,?,?,?)"), new Object[]
        {
          EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(), ro.getItmId()
        }, Types.NUMERIC);

        Number numConv = EbizParamsMMUtils.getItmUomConvFactor(this, itmid, itmUomSp, itmUomBs);
        //System.out.println("numConv" + numConv);
        oracle.jbo.domain.Number n = new oracle.jbo.domain.Number(tmpWt);
        stdWt = stdWt.add((n.multiply(ro.getTotQty())).multiply(numConv));
      }
      catch (SQLException e)
      {
        e.printStackTrace();
      }


      //            ViewObjectImpl srcVo = this.getSlsTrnpBulkVrSrc1();
      //            SlsTrnpBulkVrSrcVORowImpl srcRo = (SlsTrnpBulkVrSrcVORowImpl) srcVo.getCurrentRow();
      //srcRo.setGrossWt(stdWt); Commented by Bhanu PS

      //            ViewObjectImpl vo = this.getSlsTrnpBulkVr1();
      //            SlsTrnpBulkVrVORowImpl voCurr = (SlsTrnpBulkVrVORowImpl) vo.getCurrentRow();
      //voCurr.setTransTotalGrossWt(null);
    }
    itr.closeRowSetIterator();

  }

  /**
   * Container's getter for LovSalesRegnVO1.
   * @return LovSalesRegnVO1
   */
  public ViewObjectImpl getLovSalesRegnVO1()
  {
    return (ViewObjectImpl) findViewObject("LovSalesRegnVO1");
  }

  /**
   *Tms id : 64633
   *Remarks : Method to delete Item
   *Date:23-08-2018
   *By : Amit Kumar
   *
   */
  public void deleteItem()
  {
    ViewObjectImpl itmVo = this.getSlsTrnpBulkVrItm1();
    Row r = itmVo.getCurrentRow();
    if (r != null)
    {
      r.remove();
      setGrossStdWt(null, null, null);
    }

  }


  public String showShipAddFeature()
  {
    String featureVal = null;
    try
    {
      featureVal =
        (String) EbizParamsAPPUtils.getGlblFeatureVal(this, "TPT.10083", EbizParamsAPPUtils.GLBL_FTR_TYP_VARCHAR);
    }
    catch (Exception e)
    {
      e.printStackTrace();

    }

    return featureVal;
  }


  /*Created On:- 19-11-2018
     * Created By:- Akhil Shandilya
     * Remarks:- To ammend bulk vehicle request and to validate whether Loading request already exists
     * */
  public Integer amendVhclSchdl()
  {
    ViewObjectImpl vo2 = this.getSlsTrnpBulkVr1();
    String DocId = (String) vo2.getCurrentRow().getAttribute("DocId");
    String amdNo = (String) vo2.getCurrentRow().getAttribute("AmdNo");
    Integer amendmentNo = 0;
    if (vo2.getCurrentRow().getAttribute("AmdNo") != null)
    {
      amendmentNo = Integer.parseInt(amdNo.toString());
      amendmentNo = amendmentNo + 1;
    }
    Integer ret = new Integer(1);
    Number n = new Number(0);

    //            System.out.println("DocId is "+DocId);
    //            System.out.println("Inside amend");
    if (DocId != null)
    {
      this.getDBTransaction().postChanges();
      try
      {
        Object ob =
          ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_TRNP_AMND_BLK_LR(?,?,?,?,?,?)"), new Object[]
        {
          EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
          EbizParams.GLBL_HO_ORG_ID(), DocId, "N"
        }, Types.NUMERIC);
        // System.out.println("result is " + ob);
        n = ob == null? new Number(0): new Number(ob);
        vo2.getCurrentRow().setAttribute("Freeze", null);
        //                vo2.getCurrentRow().setAttribute("LrStatus", 2353);

        if (n.compareTo(new Number(2)) == 0)
        {
          //                    ADFModelUtils.showFormattedFacesMessage(null, ADFModelUtils.resolvRsrc("MSG.17745"), // "VEHICLE REQUEST NUMBER NOT GENERATED",
          //                                                            FacesMessage.SEVERITY_INFO);
          ret = -1;
        }
        else if (n.compareTo(new Number(5)) == 0)
        {
          //                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.17755"),
          //                        //"Can'nt Ammend this Vehicle Request",
          //                        ADFModelUtils.resolvRsrc("MSG.17747"),
          //                        //"This Document is already used in another Application.",
          //                        FacesMessage.SEVERITY_INFO);
          ret = -2;
        }
        else if (n.compareTo(new Number(0)) == 0)
        {
          //                    ADFModelUtils.showFormattedFacesMessage("Error",
          //                        //"Can'nt Ammend this Vehicle Request",
          //                       "There is some error in calling function FN_TRNP_AMND_BLK_LR",
          //
          //                        FacesMessage.SEVERITY_INFO);
          ret = -3;
        }
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
      if (n.compareTo(new Number(1)) == 0)
      {
        vo2.getCurrentRow().setAttribute("AmdNo", amendmentNo);
      }
    }
    return ret;

  }

  /**
   * Container's getter for LOVLrDocIdSrcVO1.
   * @return LOVLrDocIdSrcVO1
   */
  public ViewObjectImpl getLOVLrDocIdSrcVO1()
  {
    return (ViewObjectImpl) findViewObject("LOVLrDocIdSrcVO1");
  }

  public void refreshMainView(String docId)
  {
    ViewObjectImpl vo = getSlsTrnpBulkVr1();
    ViewCriteria vc = vo.getViewCriteria("SlsTrnpBulkVrVOCriteria");
    vo.applyViewCriteria(vc);
    vo.setNamedWhereClauseParam("bindCldId", EbizParams.GLBL_APP_CLD_ID());
    vo.setNamedWhereClauseParam("bindDocId", docId);
    vo.setNamedWhereClauseParam("bindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
    vo.setNamedWhereClauseParam("bindOrgId", EbizParams.GLBL_APP_USR_ORG());
    vo.setNamedWhereClauseParam("bindSlocId", EbizParams.GLBL_APP_SERV_LOC());
    vo.executeQuery();
  }

  public void executeBulkLr()
  {
    ViewObjectImpl vo = this.getSlsTrnpBulkVr1();
    String docId = (String) vo.getCurrentRow().getAttribute("DocId");
    this.refreshMainView(docId);
  }

  /**
   * Container's getter for LovRmaVO1.
   * @return LovRmaVO1
   */
  public ViewObjectImpl getLovRmaVO1()
  {
    return (ViewObjectImpl) findViewObject("LovRmaVO1");
  }

  public Number calcBlncWt(String DocId)
  {
    Number n = new Number(0);
    String Doc_Id = (String) this.getSlsTrnpBulkVr1().getCurrentRow().getAttribute("DocId");
    //System.out.println("transactional doc id = " + Doc_Id);
    try
    {
      Object o =
        ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_GET_UNPOSTD_VR_SO_WT(?,?,?,?,?)"), new Object[]
      {
        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(), DocId, Doc_Id
      }, Types.NUMERIC);
      n = new Number(o);
      // System.out.println("unposted Wt = " + n);
    }
    catch (Exception sqle)
    {
      sqle.printStackTrace();
    }
    return n;
  }

  public Number getStdWtCalc()
  {
    // System.out.println("in getStdWeight mnethod ");
    Number stdWt = StaticValue.NUMBER_ZERO;
    ViewObject soVw = this.getTrnpBulkSoView1();
    Row cr = soVw.getCurrentRow();
    if (cr != null)
    {
      //            stdWt = (Number) cr.getAttribute("StdWeight");
      stdWt = new Number(0);
    }
    return stdWt;
  }

  public Number unpostedItmStk(String ItmId, String WhId, String ColorAttGrp)
  {
    Number n = new Number(0);
    ViewObjectImpl vo = this.getSlsTrnpBulkVr1();
    SlsTrnpBulkVrVORowImpl r = (SlsTrnpBulkVrVORowImpl) vo.getCurrentRow();
    String Doc_Id = (String) r.getAttribute("DocId");
    SlsTrnpBulkVrItmVORowImpl itmRow = (SlsTrnpBulkVrItmVORowImpl) getSlsTrnpBulkVrItm1().getCurrentRow();
    //        System.out.println(" ///////////// Attribute Id passed = "+itmRow.getColorAttGrpId());
    //System.out.println("transactional doc id = " + Doc_Id);
    try
    {

      Object o =
        ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_GET_UNPOSTD_VR_ITM_STK(?,?,?,?,?,?,?,?)"),
                                   new Object[]
      {
        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(), ItmId, WhId,
        r.getFyId(), Doc_Id, ColorAttGrp
      }, Types.NUMERIC);
      n = new Number(o);
      //  System.out.println("unposted stk+++" + n);
    }
    catch (Exception sqle)
    {
      sqle.printStackTrace();
    }
    return n;
  }

  /**Created On:- 08.05.2019
   * Created By:- Bhanu PS
   * Remarks:- To Populate wip stok of item
   * */
  public Number wipItmStk(String ItmId, String WhId, String ColorAttGrpId)
  {
    Number n = new Number(0);
    ViewObjectImpl vo = this.getSlsTrnpBulkVr1();
    SlsTrnpBulkVrVORowImpl r = (SlsTrnpBulkVrVORowImpl) vo.getCurrentRow();
    //        String Doc_Id = (String) r.getAttribute("DocId");
    //        Timestamp docDt = (Timestamp) r.getAttribute("DocDt");
    //        SlsTrnpBulkVrItmVORowImpl itmRow = (SlsTrnpBulkVrItmVORowImpl) getSlsTrnpBulkVrItm1().getCurrentRow();
    //        System.out.println("///////////// Attribute Id passed = "+itmRow.getColorAttGrpId()+" : "+itmRow.getAttribute("ColorAttGrpId"));
    //        System.out.println("transactional doc id = " + Doc_Id);
    try
    {

      Object o =
        ADFModelUtils.callFunction(this, new StringBuilder("sls.FN_SLS_GET_WIP_ITM_STK_VS(?,?,?,?,?,?,?,?)"),
                                   new Object[]
      {
        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
        EbizParams.GLBL_HO_ORG_ID(), ItmId, StaticValue.getCurrDtWidTimestamp(), WhId, ColorAttGrpId
      }, Types.NUMERIC);
      n = new Number(o);
      //            System.out.println("////////////// wip stk+++" + n);
    }
    catch (Exception sqle)
    {
      sqle.printStackTrace();
    }
    return n;
  }
  /*Created On:- 12-12-2018
     * Created By:- Akhil Shandilya
     * Remarks:- To Populate total balance weight in SO
     * */
  public oracle.jbo.domain.Number getTotalBalanceWtVal()
  {

    /**
         * Commented By : Bhanu PS
         * Commented On : 15.06.2019
         *              : below Code is commented as per the requirements of KML
         *
         * */
    oracle.jbo.domain.Number totalBalanceWtVal = StaticValue.NUMBER_ZERO;
    //        oracle.jbo.domain.Number balanceVal = StaticValue.NUMBER_ZERO;
    //        ViewObjectImpl vo1 = this.getSlsTrnpBulkVrSrc1();
    //        ViewObjectImpl vo2 = this.getTrnpBulkSoView1();
    //        Row[] r = vo1.getAllRowsInRange();
    //        if (r.length > 0) {
    //            for (Row row : r) {
    //                balanceVal = (oracle.jbo.domain.Number) row.getAttribute("TransBalanceWt");
    //                totalBalanceWtVal = totalBalanceWtVal.add(balanceVal);
    //            }
    //        } else {
    //            Row[] rview = vo2.getAllRowsInRange();
    //            System.out.println("inside else" + rview.length);
    //            if (rview.length > 0) {
    //                for (Row row : rview) {
    //
    //                    String ChkSelect = (String) row.getAttribute("TransChkSelect");
    //                    //    System.out.println("ChkSelect" + ChkSelect);
    //                    if (ChkSelect != null && ChkSelect.equalsIgnoreCase("Y")) {
    //                        balanceVal = (oracle.jbo.domain.Number) row.getAttribute("TransBalanceWt");
    //                        totalBalanceWtVal = totalBalanceWtVal.add(balanceVal);
    //                    }
    //                }
    //                this.getSlsTrnpBulkVr1().getCurrentRow().setAttribute("TransTotalBalanceWt", totalBalanceWtVal);
    //            }
    //        }
    return totalBalanceWtVal;
  }


  /**
   * Added By : Bhanu PS
   * Added On 15.06.2019
   * This Method is created to calculate total Bundle in all selected Sales Orders.
   * */
  public oracle.jbo.domain.Number getTotalBundleVal()
  {
    oracle.jbo.domain.Number totalBundleVal = StaticValue.NUMBER_ZERO;
    oracle.jbo.domain.Number val = StaticValue.NUMBER_ZERO;
    ViewObjectImpl vo1 = this.getSlsTrnpBulkVrSrc1();
    ViewObjectImpl vo2 = this.getTrnpBulkSoView1();
    ViewObjectImpl vo3 = this.getTrnpBulkTrfViewVO1();
    Row[] r = vo1.getAllRowsInRange();
    if (r.length > 0)
    {
      //            System.out.println("getTotalBundleVal ============ Inside IF ");
      for (Row row: r)
      {
        val = (oracle.jbo.domain.Number) row.getAttribute("TotBndl");
        totalBundleVal = totalBundleVal.add(val);
      }
    }
    else
    {
      if (this.getSlsTrnpBulkVr1().getCurrentRow().getAttribute("TransDocTyp") == 915)
      {
        Row[] rview1 = vo3.getAllRowsInRange();
//        System.err.println("______________inside getTotalBundleVal____when doctype is transfer Order___");
//        System.err.println("______________rview1.length___" + rview1.length);
        if (rview1.length > 0)
        {
          for (Row row: rview1)
          {

            String ChkSelect = (String) row.getAttribute("TransChkSelect");
//            System.err.println("______________ChkSelect___" + ChkSelect);
            if (ChkSelect != null && ChkSelect.equalsIgnoreCase("Y"))
            {

              val = (oracle.jbo.domain.Number) row.getAttribute("TrfItmQty");
//              System.err.println("_________val___" + val);
              totalBundleVal = totalBundleVal.add(val);
//              System.err.println("________totalBundleVal___" + totalBundleVal);
            }
          }
          this.getSlsTrnpBulkVr1().getCurrentRow().setAttribute("TransTotalBundle", totalBundleVal);
        }


      }
      else
      {
        Row[] rview = vo2.getAllRowsInRange();
        if (rview.length > 0)
        {
          for (Row row: rview)
          {

            String ChkSelect = (String) row.getAttribute("TransChkSelect");
            //  System.out.println("ChkSelect" + ChkSelect);
            if (ChkSelect != null && ChkSelect.equalsIgnoreCase("Y"))
            {
              //                        System.out.println("===========================");
              val = (oracle.jbo.domain.Number) row.getAttribute("SalesItmQty");
              totalBundleVal = totalBundleVal.add(val);
              //                        System.out.println(" SalesItmQty ==== "+val);
            }
          }
          this.getSlsTrnpBulkVr1().getCurrentRow().setAttribute("TransTotalBundle", totalBundleVal);
        }
      }
    }
    return totalBundleVal;
  }

  public oracle.jbo.domain.Number getTotalAmount()
  {
    oracle.jbo.domain.Number totalAmt = StaticValue.NUMBER_ZERO;
    oracle.jbo.domain.Number amt = StaticValue.NUMBER_ZERO;
    ViewObjectImpl vo1 = this.getSlsTrnpBulkVrSrc1();
    ViewObjectImpl vo2 = this.getTrnpBulkSoView1();
    Row[] r = vo1.getAllRowsInRange();
    if (r.length > 0)
    {
      //System.out.println("getTotalBundleVal ============ Inside IF ");
      for (Row row: r)
      {
        amt = (oracle.jbo.domain.Number) row.getAttribute("TotAmt");
        totalAmt = totalAmt.add(amt);
      }
    }
    else
    {
      Row[] rview = vo2.getAllRowsInRange();
      //            System.out.println("=============inside else" + rview.length);
      if (rview.length > 0)
      {
        for (Row row: rview)
        {

          String ChkSelect = (String) row.getAttribute("TransChkSelect");
          // System.out.println("ChkSelect" + ChkSelect);
          if (ChkSelect != null && ChkSelect.equalsIgnoreCase("Y"))
          {
            //                        System.out.println("===========================");
            amt = (oracle.jbo.domain.Number) row.getAttribute("TotAmtBs");
            totalAmt = totalAmt.add(amt);
            //                        System.out.println(" TotAmtBs ==== "+amt);
          }
        }
        this.getSlsTrnpBulkVr1().getCurrentRow().setAttribute("TransTotalAmt", totalAmt);
      }
    }
    return totalAmt;
  }

  /**
   * TMS ID : 80455
   * Modified By : Bhanu PS
   * Modified On : 09.05.2019
   * Modified : TOTAL CBM VALUE AGAINST THE SELECTED ORDERS HAS BEEN SHOWN
   * **/
  public oracle.jbo.domain.Number getTotalItmCBM()
  {
    // System.out.println(" ========== TOTAL CBM VALUE . . . ");
    oracle.jbo.domain.Number totalCbm = StaticValue.NUMBER_ZERO;
    Row headerRow = this.getSlsTrnpBulkVr1().getCurrentRow();
    if (headerRow != null)
    {
      String headerDocId = (String) headerRow.getAttribute("DocId");
      ViewObjectImpl bulkItmVo = this.getSlsTrnpBulkVrItmVO3();
      bulkItmVo.setRangeSize(-1);
      //            System.out.println(" Total Rows == "+bulkItmVo.getEstimatedRowCount());
      RowSetIterator itr = bulkItmVo.createRowSetIterator(null);
      while (itr.hasNext())
      {
        Row r = itr.next();
        String docId = (String) r.getAttribute("DocId");
        if (docId.equals(headerDocId) && (r.getAttribute("ItmFlag") != null && r.getAttribute("ItmFlag").equals("Y")))
        {
          // System.out.println(" == TransCBM  "+ r.getAttribute("TransCBM"));;
          totalCbm = totalCbm.add((Number) r.getAttribute("ItmCbm"));
        }
      }
      // System.out.println(" ============ sum = "+totalCbm);
      itr.closeRowSetIterator();

    }
    this.getSlsTrnpBulkVr1().getCurrentRow().setAttribute("TransTotalCbmVal", totalCbm);
    return totalCbm;
  }

  /**
   * TMS ID : 80198
   * Added By : Bhanu PS
   * Added On : 09.05.2019
   *              This Method is added to get the available stock.
   * */

  public Number getAvlBlStock(String ItmId, String WhId, String ColorAttGrpId, String ItmUomSp, String ItmUomBs)
  {
    Number ret = new Number(0);

    ViewObjectImpl vo = this.getSlsTrnpBulkVr1();
    SlsTrnpBulkVrVORowImpl r = (SlsTrnpBulkVrVORowImpl) vo.getCurrentRow();

    //ViewObjectImpl vo1 = this.getSlsTrnpBulkVrItm1();
    //SlsTrnpBulkVrItmVORowImpl itmRow = (SlsTrnpBulkVrItmVORowImpl) vo1.getCurrentRow();

    Number numConv = EbizParamsMMUtils.getItmUomConvFactor(this, ItmId, ItmUomSp, ItmUomBs);
    //        System.out.println("value of conversion factor +++++" + numConv);
    try
    {
      Object o =
        ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_MM_GET_AVAIL_STK(?,?,?,?,?,?,?,?,?,?,?)"),
                                   new Object[]
      {
        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(), ItmId, WhId,
        StaticValue.getCurrDtWidTimestamp(), numConv, null, "Q", ColorAttGrpId, "S" //"O"















      }, Types.NUMERIC);

      Object o1 =
        ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_MM_GET_AVAIL_STK_ASMBL(?,?,?,?,?,?,?,?,?,?)"),
                                   new Object[]
      {
        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(), ItmId, WhId,
        StaticValue.getCurrDtWidTimestamp(), numConv, null, ColorAttGrpId, "S" //"O"















      }, Types.NUMERIC);
      Number n = new Number(o).add(new Number(o1));
      ret = n;
      //            System.out.println("========== From Am ret = " + ret);
    }
    catch (Exception sqle)
    {
      sqle.printStackTrace();
    }
    return ret;
  }

  /**
   * Created By : Bhanu PS
   * Created On : 15.05.2019
   *              this function is created to delete unchecked item from SlsTrnpBulkVrItm
   *
   * */

  public String removeItemFromVr(String type)
  { 
    
//   System.err.println(" _______________Insidee removeItemFromVr ______________________________________ ");
    //TransItemSelected  removeItemFromVr
    //this.getDBTransaction().postChanges();
    Integer DocType = (Integer) this.getSlsTrnpBulkVr1().getCurrentRow().getAttribute("DocTypId");
    ViewObjectImpl itmVo1 = this.getSlsTrnpBulkVrItm1();

    //RowSetIterator itr = itmVo1.createRowSetIterator(null);
    // Row row[] = itmVo1.getFilteredRows("ItmFlag", "Y");
    /**
 * **************************** CODE STARTED *******************************
 * */
    ViewObjectImpl bulkVrSrc = this.getSlsTrnpBulkVrSrc1();
    ViewObjectImpl itmVo = this.getSlsTrnpBulkVrItmVO3();

//    System.err.println(" Rows In Source VO : " + bulkVrSrc.getEstimatedRowCount());
    bulkVrSrc.setRangeSize(-1);
    Row[] srcRows = bulkVrSrc.getAllRowsInRange();
    StringBuilder s = new StringBuilder();
    for (Row sr: srcRows)
    {
      String docSrcId = (String) sr.getAttribute("SrcDocId");
//      System.err.println(" _______SrcDocId _____2375_________________________________ "+docSrcId);
      itmVo.setRangeSize(-1);
      Row itmRow[] = itmVo.getFilteredRows("SrcDocId", docSrcId);
//      System.err.println(" _______itmRow.length_____2378_________________________________ "+itmRow.length);
      Integer count = new Integer(0);
      for (Row ir: itmRow)
      {
        if ("N".equalsIgnoreCase((String) ir.getAttribute("ItmFlag")))
        {
          
//          System.err.println(" _______Itm name itmflag is N________"+ir.getAttribute("TransItmNm"));
          count++;
          
//         System.err.println(" _______count____2386______________________ "+count);
        }
      }
      if(DocType==2341 ||DocType==2342)/** Code added by Manjeet Singh **/
      {
        if (count.compareTo(itmRow.length) == 0)
        {
//         System.err.println(" _______itmRow.length equals to 0___2391________________ "+itmRow.length);
          //                return "N";
          String soId = getSoIdFrmDocId(docSrcId);
          s.append(" " + soId + " ");
        }
      }
    }
    String soId = s.toString();
    if (!(soId.toString().equalsIgnoreCase("") || soId == null))
    {
//    System.err.println("_____________value of docId_________________" + soId);
      return soId;
    }
    itmVo.setRangeSize(-1);
    Row itmRow[] = itmVo.getAllRowsInRange();
//    System.err.println("____________________ Rows before Delete : " + itmRow.length);
    for (Row ir: itmRow)
    {
      if ("N".equalsIgnoreCase((String) ir.getAttribute("ItmFlag"))&& type.equals("A"))
      {
//        System.err.println("________Deleting Item when Type is A ITEM NAME : " + ir.getAttribute("TransItmNm"));
        ir.remove();
      }
    }


    /******************** END *************************/
    //        if (row.length == 0) {
    //
    //            return "N";
    //        }
    //        itmVo1.setRangeSize(-1);
    //        Row r1[] = itmVo1.getAllRowsInRange();
    //        System.out.println("value of row++++" + r1.length);
    //        for (Row rr : r1) {
    //            if ("N".equalsIgnoreCase((String) rr.getAttribute("ItmFlag"))) {
    //                rr.remove();
    //            }
    //        }
    //Abive code is commented for testing

    //                    try {
    //                        ADFModelUtils.callFunction(this,
    //                                                   new StringBuilder("SLS.FN_TRNP_BULK_LR_ITM_VLDT(?,?,?,?,?,?,?,?)"), new Object[] {
    //                                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
    //                                                   EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(), docId,
    //                                                   null, null, null
    //                        }, Types.INTEGER);
    //                    } catch (Exception e) {
    //                        e.printStackTrace();
    //                    }
    //        itr.closeRowSetIterator();
    this.getSlsTrnpBulkVrSrc1().executeQuery();
    //this.getSlsTrnpBulkVrItmVO3().executeQuery();
    ViewObjectImpl vo = this.getSlsTrnpBulkVrItm1();
    vo.executeQuery();
    //        this.getDBTransaction().postChanges();
    return "Y";
  }

  public String insertIntoWF(String wfId, Integer lvlFrm, Integer lvlTo, String action, String remark, Number amount)
  {
    this.getDBTransaction().postChanges();
    Integer i = -1;
    SlsTrnpBulkVrVORowImpl currentRow = (SlsTrnpBulkVrVORowImpl) getSlsTrnpBulkVr1().getCurrentRow();
    Object docTxnId = currentRow.getDocId();
    // System.out.println("DOc Txn id" + docTxnId);
    Object prjIdO = ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}");
    String prjId = prjIdO == null? "PROJ0000": prjIdO.toString();

    // System.out.println(" Inside the value for inserting workflow details");
    Integer usrId = EbizParams.GLBL_APP_USR();
    // SlsCcpVORowImpl ccpRow = (SlsCcpVORowImpl) getSlsCcpVO1().getCurrentRow();
    return (String) WorkFlowUtils.insertEntriesIntoWfTxn(this.getRootApplicationModule(), 24266, 0,
                                                         currentRow.getDocId(), wfId, usrId, usrId, lvlFrm, lvlTo,
                                                         action, remark, amount, prjId);
  }

  /**
   * Method to get workflow id
   * @return
   */

  public String getWfNo()
  {
    Object prjIdO = ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}");
    String prjId = prjIdO == null? "PROJ0000": prjIdO.toString();


    // SlsTrnpBulkVrVORowImpl currentRow = (SlsTrnpBulkVrVORowImpl) getSlsTrnpBulkVr1().getCurrentRow();


    return (String) WorkFlowUtils.getWorkFlowId(this.getRootApplicationModule(), 24266, 0, prjId);
  }

  public Integer currUsrLvl(String WfNum)
  {
    Object prjIdO = ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}");
    String prjId = prjIdO == null? "PROJ0000": prjIdO.toString();
    SlsTrnpBulkVrVORowImpl currentRow = (SlsTrnpBulkVrVORowImpl) getSlsTrnpBulkVr1().getCurrentRow();
    return WorkFlowUtils.getWorkFlowCurrUsrLvl(this.getRootApplicationModule(), WfNum, 24266, 0, prjId);
  }


  /** Modified By : Bhanu Ps
   *  Modified On : 28.05.2019
   *              This method is created to Update the Status of the document.
   *
   */
  public void wfReturnAction(String mode)
  {
    SlsTrnpBulkVrVORowImpl currentRow = (SlsTrnpBulkVrVORowImpl) getSlsTrnpBulkVr1().getCurrentRow();
    String DocTxnId = (String) currentRow.getAttribute("DocId");
    Integer VrMode = (Integer) currentRow.getAttribute("VrMode");
    if (mode != null && currentRow != null)
    {
      Boolean flg = false;
      String msg = "";
      if (mode.equalsIgnoreCase("A"))
      {
        /**
                 *  Addded By : Bhanu PS
                 *  Added On  : 15.06.2019
                 *            : This Method is created to update the Lr bal Qty
                 *              from delivery Schedule when the document is approved.(KML ENHANCEMENT).
                 * */
        try
        {
          ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_TRNP_UPDT_QTY_FRM_BULK_VR(?,?,?,?,?)"),
                                     new Object[]
          {
            EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
            EbizParams.GLBL_HO_ORG_ID(), DocTxnId
          }, Types.VARCHAR);
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }

        currentRow.setVrMode(2465);
        msg = ADFModelUtils.resolvRsrc("MSG.13891"); //Document approved Successfully.
        flg = true;
      }
      else if (mode.equalsIgnoreCase("F"))
      {
        currentRow.setVrMode(2464);
        msg = ADFModelUtils.resolvRsrc("MSG.17862"); //Document Forwarded
        flg = true;
      }
      //            else if (mode.equalsIgnoreCase("R")) {
      ////                currentRow.setCcpMode(313);
      ////                currentRow.setCcpStat(217);
      //                flg = true;
      //            }
      else if (mode.equalsIgnoreCase("V"))
      {
        currentRow.setVrMode(2463);
        flg = true;
      }
      if (flg)
      {
        try
        {
          this.getDBTransaction().commit();
          ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.12741"),
            //Document Saved Successfully.

            msg, FacesMessage.SEVERITY_INFO);
        }
        catch (Exception e)
        {
          e.printStackTrace();
          this.getDBTransaction().rollback();
          currentRow.setAttribute("VrMode", VrMode);
          revertWfChanges(DocTxnId);

        }
      }
    }
  }

  public void revertWfChanges(String DocTxnId)
  {

    try
    {
      ADFModelUtils.callFunction(this, new StringBuilder("APP.WF_REV_STATUS_APRV(?,?,?,?,?,?)"), new Object[]
      {
        EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG(), 24266, DocTxnId, 0,
        ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}")
      }, Types.INTEGER);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }

  public String chkCageStatus()
  {
    ViewObjectImpl vo = this.getSlsTrnpBulkVr1();
    Row r = vo.getCurrentRow();
    String docId = (String) r.getAttribute("DocId");
    String res = "N";
    try
    {
      res =
        (String) ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_CHK_AND_RESRV_CAGE(?,?,?,?,?)"),
                                            new Object[]
      {
        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
        EbizParams.GLBL_HO_ORG_ID(), docId





      }, Types.VARCHAR);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    //            System.out.println("value of res++++"+res);
    return res;
  }

  public Integer chkPendingUsr()
  {
    Object prjIdO = ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}");
    String prjId = prjIdO == null? "PROJ0000": prjIdO.toString();
    SlsTrnpBulkVrVORowImpl currentRow = (SlsTrnpBulkVrVORowImpl) getSlsTrnpBulkVr1().getCurrentRow();
    return WorkFlowUtils.docPendingAt(this.getRootApplicationModule(), 24266, 0, currentRow.getDocId(), prjId);
  }

  public String getUsrNm(Integer usrId)
  {
    String res = null;
    if (usrId != null)
    {
      res = EbizParams.getUsrDescFrmUsrId(this, usrId);
    }
    return res == null? ADFModelUtils.resolvRsrc("MSG.2402"): res;
  }

  public void selectAllDoc(String action)
  {
    //TransChkSelect
    ViewObjectImpl vo = this.getTrnpBulkSoView1();
    vo.setRangeSize(-1);
    if (action != null)
    {
      if (action.equals("SA"))
      {
        //select ALL

        Row[] row = vo.getAllRowsInRange();
        if (row.length > 0)
        {
          for (Row r: row)
          {
            r.setAttribute("TransChkSelect", "Y");
          }
        }
      }
      else if (action.equals("DA"))
      {

        Row[] row = vo.getAllRowsInRange();
        if (row.length > 0)
        {
          for (Row r: row)
          {
            r.setAttribute("TransChkSelect", "N");
          }
        }
      }
    }
  }

  public void selectAllItem(String action)
  {
    //TransChkSelect
    ViewObjectImpl vo = this.getSlsTrnpBulkVrItm1();
    vo.setRangeSize(-1);
    if (action != null)
    {
      if (action.equals("SA"))
      {
        //select ALL
        RowSetIterator itr = vo.createRowSetIterator(null);
        while (itr.hasNext())
        {
          Row r = itr.next();
          r.setAttribute("ItmFlag", "Y");
        }
        this.getTotalItmCBM();
        itr.closeRowSetIterator();
      }
      else if (action.equals("DA"))
      {
        //deSelect ALl
        RowSetIterator itr = vo.createRowSetIterator(null);
        while (itr.hasNext())
        {
          Row r = itr.next();
          r.setAttribute("ItmFlag", "N");
        }
        this.getTotalItmCBM();
        itr.closeRowSetIterator();

      }
    }
  }

  public void updateSchlDt()
  {
    Row voRow = this.getDualForDate1().getCurrentRow();
    ViewObjectImpl voItm = this.getSlsTrnpBulkVrItm1();
    voItm.setRangeSize(-1);
    Row[] r = voItm.getAllRowsInRange();
    if (voRow != null)
    {
      //            System.out.println("Inside If :: ---- " + voRow.getAttribute("TransSchlDt"));

      java.sql.Timestamp dt = (java.sql.Timestamp) voRow.getAttribute("TransSchlDt");
      if (dt != null)
      {
        for (Row row: r)
        {

          row.setAttribute("SchdlDt", dt);
        }
      }
      else
      {
        ADFModelUtils.showFormattedFacesMessage("", "Please select Schedule date.", FacesMessage.SEVERITY_WARN);
      }
    }
    this.getDualForDate1().executeQuery();

  }

  public java.sql.Timestamp getDlvDt()
  {
    java.sql.Timestamp dt = null;
    ViewObjectImpl voItm = this.getSlsTrnpBulkVrItm1();
    Row r = voItm.getCurrentRow();
    if (r != null)
    {

      dt = (java.sql.Timestamp) r.getAttribute("DlvDt");

      //System.out.println(" ======================= dt = "+dt);
    }
    return dt;
  }

  public String getGeneratedLr()
  {
    String docId = (String) this.getSlsTrnpBulkVr1().getCurrentRow().getAttribute("DocId");
    String lr = "";
    try
    {
      Object ob =
        ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_TRNP_SHOW_LR_FROM_VR(?,?,?,?,?)"), new Object[]
      {
        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
        EbizParams.GLBL_HO_ORG_ID(), docId
      }, Types.VARCHAR);
      lr = ob == null? " No Loading Request ": ob.toString();
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return lr;
  }

  public String checkVehicle()
  {
    String res = "Y";
    ViewObjectImpl voimpl = this.getSlsTrnpBulkVrSrc1();

    voimpl.setRangeSize(-1);
    System.out.println(" rows +++ " + voimpl.getEstimatedRowCount());
    Row r[] = voimpl.getAllRowsInRange();
    for (Row row: r)
    {
      Object vhcl = row.getAttribute("VhclNo");
      String type = (String) row.getAttribute("ReqTyp");
      String routeId = (String) row.getAttribute("RouteDocId");
      Object oldVhcl = row.getAttribute("OldVhclNo");
      if (vhcl == null)
        return "N";
      if (type != null && (!type.equals("I")))
        if (oldVhcl == null)
          return "N";


    }
    return res;
  }

  public String checkStockDetails()
  {
    this.getDBTransaction().postChanges();
    String s = "Y";
    String docId = (String) this.getSlsTrnpBulkVr1().getCurrentRow().getAttribute("DocId");
    //        ViewObjectImpl itmVo1 = this.getSlsTrnpBulkVrItm1();
    //        RowSetIterator itr = itmVo1.createRowSetIterator(null);
    //        Row row[] = itmVo1.getFilteredRows("ItmFlag", "Y");

    try
    {
      Object ob =
        ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_TRNP_CHK_STK_FOR_BVR(?,?,?,?,?)"), new Object[]
      {
        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
        EbizParams.GLBL_HO_ORG_ID(), docId
      }, Types.VARCHAR);
      s = ob == null? "Y": ob.toString();
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    //System.out.println("returning ================= "+s);
    this.getSlsTrnpBulkVrSrc1().executeQuery();
    return s;
  }

  // ------------------------------------------- CODE ADDED TO SEND NOTIFICATION -------------------------------------
  public void sendRegularNotification(String docId)
  {
    // System.out.println("Inside ....... sendRegularNotification : "+docId);
    //this.getSlsTrnpVhclSchdl1().getCurrentRow().setAttribute("Status", 49);
    CallableStatement st = null;
    //            Integer fyid =
    //                EbizParams.getFyId(this.getRootApplicationModule(), EbizParams.GLBL_APP_USR_ORG(),
    //                                   new Timestamp(System.currentTimeMillis()));
    //            String PickNo = null;

    try
    {
      String useWms =
        EbizParams.getDispIdFrmDBTable(this, null, null, null, null, EbizParams.GLBL_APP_CLD_ID(), "APP", "APP$PRF",
                                       "USE_WMS", null, null, null, null, "APP_PRF_ID");
      if (useWms != null)
      {
        //                    if (useWms.equalsIgnoreCase("N")) {
        //
        //    //                    PickNo = this.genPickFrmSchdl(fyid); // Method to generate Pick
        //    //
        //    //                    this.genIssueFromSchedule(); // Method to generate Issue
        //
        //                    } else
        if (useWms.equalsIgnoreCase("Y"))
        {
          //String docId = (String) this.getSlsTrnpVhclSchdl1().getCurrentRow().getAttribute("DocId");
          //from here
          ResultSet rs = null;
          ProcPrams params[] = new ProcPrams[]
          {
            new ProcPrams(1, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_APP_CLD_ID()),
            new ProcPrams(2, Types.VARCHAR, ProcPrams.IN, EbizParams.GLBL_APP_SERV_LOC()),
            new ProcPrams(3, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_APP_USR_ORG()),
            new ProcPrams(4, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_HO_ORG_ID()),
            new ProcPrams(5, Types.NUMERIC, ProcPrams.IN, docId),
            new ProcPrams(6, OracleTypes.CURSOR, ProcPrams.OUT, rs),
          };


          ArrayList al = new ArrayList();
          try
          {
            st =
              getDBTransaction().createCallableStatement("begin " + "SLS.PROC_WMS_VHCL_SCHDL_DVC_INFO(?,?,?,?,?,?)" +
                                                         ";end;", 0);
            for (ProcPrams p: params)
            {
              if (p.getParamType() == ProcPrams.IN)
              {
                st.setObject(p.getSrNo(), p.getValue());
              }
              else if (p.getParamType() == ProcPrams.OUT)
              {
                st.registerOutParameter(p.getSrNo(), p.getDataType());
              }
            }
            st.executeUpdate();

            for (ProcPrams p: params)
            {
              if (p.getParamType() == ProcPrams.OUT)
              {
                al.add(st.getObject(p.getSrNo()));
              }
            }
          }
          catch (SQLException e)
          {
            e.printStackTrace();
          }

          if (!al.isEmpty())
          {
            rs = (ResultSet) al.get(0);
          }
          String authKey = null;
          String devicekey = null;
          Boolean success = true;
          Integer cnt = 0;
          if (rs != null)
          {
            while (rs.next())
            {
              authKey = rs.getString("AUTH_KEY");
              devicekey = rs.getString("DVC_ID");
              //System.out.println(" AUTH_KEY = "+authKey+" And DVC_ID = "+devicekey);
              Map<String, String> map = new HashMap<String, String>();
              map = this.fetchWmsDataMapSchdl(docId);
              if (authKey != null && devicekey != null)
              {
                success = NotificationSender.sendPushNotification(authKey, devicekey, map);
                if (success)
                {
                  cnt++;
                  try
                  {
                    System.out.println("before calling function fn_ntfn_dtl " + devicekey + "......" + docId);
                    Object o =
                      ADFModelUtils.callFunction(this, new StringBuilder("sls.fn_ntfn_dtl(?,?,?,?,?,?)"), new Object[]
                    {
                      docId, devicekey, EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                      EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID()
                    }, Types.NUMERIC);
                  }
                  catch (Exception e)
                  {
                    e.printStackTrace();
                  }

                }
              }

            }
            rs.close();
          }

          //                        if (cnt == 0) {
          //                            PickNo = "F";
          //                            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.15993"),
          //                                                                    ADFModelUtils.resolvRsrc("MSG.15994"),
          //                                                                    FacesMessage.SEVERITY_WARN);
          //                        }
          //To here......

        }
      }


    }
    catch (Exception e)
    {
      //                PickNo = "F";
      e.printStackTrace();
    }
    finally
    {
      try
      {

        if (st != null)
          st.close();
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
    }

    //            return PickNo;
  }

  /*
 * ------------------------------------- TMS ID : 88793 ----------------------------------
 * */
  public void sendNotification()
  {
    // System.out.println(" =============================== Inside sendNotification ");
    CallableStatement st = null;
    try
    {
      String useWms =
        EbizParams.getDispIdFrmDBTable(this, null, null, null, null, EbizParams.GLBL_APP_CLD_ID(), "APP", "APP$PRF",
                                       "USE_WMS", null, null, null, null, "APP_PRF_ID");
      if (useWms != null)
      {
        // System.out.println(" --------------------- WMS :: " + useWms);
        if (useWms.equalsIgnoreCase("Y"))
        {
          String docId = (String) this.getSlsTrnpBulkVr1().getCurrentRow().getAttribute("DocId");
          ResultSet rs = null;
          ProcPrams params[] = new ProcPrams[]
          {
            new ProcPrams(1, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_APP_CLD_ID()),
            new ProcPrams(2, Types.VARCHAR, ProcPrams.IN, EbizParams.GLBL_APP_SERV_LOC()),
            new ProcPrams(3, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_APP_USR_ORG()),
            new ProcPrams(4, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_HO_ORG_ID()),
            new ProcPrams(5, Types.NUMERIC, ProcPrams.IN, docId), new ProcPrams(6, OracleTypes.CURSOR, ProcPrams.OUT, rs),



          };

          //System.out.println(" --------------------- ");
          ArrayList al = new ArrayList();
          try
          {
            st =
              getDBTransaction().createCallableStatement("begin " + "SLS.PROC_WMS_VHCL_BVR_DVC_INFO(?,?,?,?,?,?)" +
                                                         ";end;", 0);
            for (ProcPrams p: params)
            {
              if (p.getParamType() == ProcPrams.IN)
              {
                st.setObject(p.getSrNo(), p.getValue());
              }
              else if (p.getParamType() == ProcPrams.OUT)
              {
                st.registerOutParameter(p.getSrNo(), p.getDataType());
              }
            }
            st.executeUpdate();

            for (ProcPrams p: params)
            {
              if (p.getParamType() == ProcPrams.OUT)
              {
                al.add(st.getObject(p.getSrNo()));
              }
            }
          }
          catch (SQLException e)
          {
            e.printStackTrace();
          }

          if (!al.isEmpty())
          {
            rs = (ResultSet) al.get(0);
          }

          String authKey = null;
          String devicekey = null;
          Boolean success = true;
          Integer cnt = 0;

          if (rs != null)
          {

            while (rs.next())
            {

              authKey = rs.getString("AUTH_KEY");
              devicekey = rs.getString("DVC_ID");
              //                            System.out.println(" AUTH_KEY  --------------------- " + authKey);
              //                            System.out.println(" DVC_ID ");
              Map<String, String> map = new HashMap<String, String>();
              map = this.fetchWmsDataMap(docId);
              //                            System.out.println(" =================== MAP SIZE : " + map.size());
              if (authKey != null && devicekey != null)
              {
                success = NotificationSender.sendPushNotification(authKey, devicekey, map);
                //  System.out.println(" ============ success "+success);
                if (success)
                {
                  cnt++;
                  try
                  {
                    //                                        System.out.println("before calling function fn_ntfn_dtl " + devicekey +
                    //                                                           "......" + docId);
                    Object o =
                      ADFModelUtils.callFunction(this, new StringBuilder("sls.fn_ntfn_dtl(?,?,?,?,?,?)"), new Object[]
                    {
                      docId, devicekey, EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                      EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID()
                    }, Types.NUMERIC);
                  }
                  catch (Exception e)
                  {
                    e.printStackTrace();
                  }

                }
              }
            }
            rs.close();
          }

        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      try
      {
        if (st != null)
          st.close();
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
    }
  }


  /*-------------------------------------  END  -----------------------------------
     * */

  public Map<String, String> fetchWmsDataMap(String doc_id)
  {
    Map<String, String> map = new HashMap<String, String>();
    ResultSet rs = null;
    CallableStatement st = null;
    ProcPrams params[] = new ProcPrams[]
    {
      new ProcPrams(1, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_APP_CLD_ID()),
      new ProcPrams(2, Types.VARCHAR, ProcPrams.IN, EbizParams.GLBL_APP_SERV_LOC()),
      new ProcPrams(3, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_APP_USR_ORG()),
      new ProcPrams(4, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_HO_ORG_ID()),
      new ProcPrams(5, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_APP_USR()),
      new ProcPrams(6, Types.NUMERIC, ProcPrams.IN, doc_id), new ProcPrams(7, OracleTypes.CURSOR, ProcPrams.OUT, rs),
    };
    ArrayList al = new ArrayList();
    try
    {
        /** Test remark **/
      st =
        getDBTransaction().createCallableStatement("begin " + "SLS.PROC_WMS_BVR_NOT_INFO(?,?,?,?,?,?,?)" + ";end;", 0);
      for (ProcPrams p: params)
      {
        if (p.getParamType() == ProcPrams.IN)
        {
          st.setObject(p.getSrNo(), p.getValue());
        }
        else if (p.getParamType() == ProcPrams.OUT)
        {
          st.registerOutParameter(p.getSrNo(), p.getDataType());
        }
      }
      st.executeUpdate();

      for (ProcPrams p: params)
      {
        if (p.getParamType() == ProcPrams.OUT)
        {
          al.add(st.getObject(p.getSrNo()));
        }
      }

      if (!al.isEmpty())
      {
        rs = (ResultSet) al.get(0);
      }
      if (rs != null)
      {
        while (rs.next())
        {
          map.put(rs.getString("KEY"), rs.getString("VALUE"));
          //                    System.out.println(" MAP DATA :: " + rs.getString("KEY") + " == " + rs.getString("VALUE"));
        }
        rs.close();
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      try
      {
        if (st != null)
          st.close();
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
    }
    return map;
  }

  public Map<String, String> fetchWmsDataMapSchdl(String doc_id)
  {
    Map<String, String> map = new HashMap<String, String>();
    ResultSet rs = null;
    CallableStatement st = null;
    ProcPrams params[] = new ProcPrams[]
    {
      new ProcPrams(1, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_APP_CLD_ID()),
      new ProcPrams(2, Types.VARCHAR, ProcPrams.IN, EbizParams.GLBL_APP_SERV_LOC()),
      new ProcPrams(3, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_APP_USR_ORG()),
      new ProcPrams(4, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_HO_ORG_ID()),
      new ProcPrams(5, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_APP_USR()),
      new ProcPrams(6, Types.NUMERIC, ProcPrams.IN, doc_id), new ProcPrams(7, OracleTypes.CURSOR, ProcPrams.OUT, rs),
    };
    ArrayList al = new ArrayList();
    try
    {
      st =
        getDBTransaction().createCallableStatement("begin " + "SLS.PROC_WMS_VHCL_SCHDL_NOT_INFO(?,?,?,?,?,?,?)" +
                                                   ";end;", 0);
      for (ProcPrams p: params)
      {
        if (p.getParamType() == ProcPrams.IN)
        {
          st.setObject(p.getSrNo(), p.getValue());
        }
        else if (p.getParamType() == ProcPrams.OUT)
        {
          st.registerOutParameter(p.getSrNo(), p.getDataType());
        }
      }
      st.executeUpdate();

      for (ProcPrams p: params)
      {
        if (p.getParamType() == ProcPrams.OUT)
        {
          al.add(st.getObject(p.getSrNo()));
        }
      }

      if (!al.isEmpty())
      {
        rs = (ResultSet) al.get(0);
      }
      if (rs != null)
      {
        while (rs.next())
        {
          map.put(rs.getString("KEY"), rs.getString("VALUE"));
        }
        rs.close();
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      try
      {
        if (st != null)
          st.close();
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
    }
    return map;
  }

  public String getRouteName(String docId)
  {
    String ret = null;
    try
    {
      Object o =
        ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_SLS_TRNP_GET_ROUTE_NM(?,?,?,?,?)"), new Object[]
      {
        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
        EbizParams.GLBL_HO_ORG_ID(), docId //Route doc Id





      }, Types.NVARCHAR);
      if (o != null)
        ret = o.toString();
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return ret;
  }

  public String getLocName(String docId)
  {
    String ret = null;
    try
    {
      Object o =
        ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_SLS_TRNP_GET_ADD_LOC(?,?,?,?,?)"), new Object[]
      {
        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
        EbizParams.GLBL_HO_ORG_ID(), docId // soDocId





      }, Types.NVARCHAR);
      if (o != null)
        ret = o.toString();
      else
        return "-";
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return ret;
  }

  /**
   * Container's getter for LovMode1.
   * @return LovMode1
   */
  public ViewObjectImpl getLovMode1()
  {
    return (ViewObjectImpl) findViewObject("LovMode1");
  }

  /**
   * Container's getter for DualForDate1.
   * @return DualForDate1
   */
  public ViewObjectImpl getDualForDate1()
  {
    return (ViewObjectImpl) findViewObject("DualForDate1");
  }

  /**
   * Container's getter for LovGroupNm1.
   * @return LovGroupNm1
   */
  public LovGroupNmVOImpl getLovGroupNm1()
  {
    return (LovGroupNmVOImpl) findViewObject("LovGroupNm1");
  }

  /**
   * Container's getter for LovSlsSoWh1.
   * @return LovSlsSoWh1
   */
  public ViewObjectImpl getLovSlsSoWh1()
  {
    return (ViewObjectImpl) findViewObject("LovSlsSoWh1");
  }

  /**
   * Container's getter for LovVhclName1.
   * @return LovVhclName1
   */
  public ViewObjectImpl getLovVhclName1()
  {
    return (ViewObjectImpl) findViewObject("LovVhclName1");
  }

  /**
   * Container's getter for LovSODispIdVO1.
   * @return LovSODispIdVO1
   */
  public ViewObjectImpl getLovSODispIdVO1()
  {
    return (ViewObjectImpl) findViewObject("LovSODispIdVO1");
  }


  /**
   * Container's getter for SlsTrnpBulkVrItmVO3.
   * @return SlsTrnpBulkVrItmVO3
   */
  public ViewObjectImpl getSlsTrnpBulkVrItmVO3()
  {
    return (ViewObjectImpl) findViewObject("SlsTrnpBulkVrItmVO3");
  }

  /**
   * Container's getter for BulkVrToBulkVrItmVL1.
   * @return BulkVrToBulkVrItmVL1
   */
  public ViewLinkImpl getBulkVrToBulkVrItmVL1()
  {
    return (ViewLinkImpl) findViewLink("BulkVrToBulkVrItmVL1");
  }

  /**
   * Container's getter for LovRmaWhIdVO1.
   * @return LovRmaWhIdVO1
   */
  public ViewObjectImpl getLovRmaWhIdVO1()
  {
    return (ViewObjectImpl) findViewObject("LovRmaWhIdVO1");
  }

  public void refrshStk()
  {
    ViewObjectImpl vo = this.getSlsTrnpBulkVr1();
    Row r = vo.getCurrentRow();
    String docId = (String) r.getAttribute("DocId");
    try
    {
      Object o = ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_REF_BULK_VHCL_STK(?,?,?,?,?)"), new Object[]
      {
        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
        EbizParams.GLBL_HO_ORG_ID(), docId
      }, Types.VARCHAR);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    this.getDBTransaction().postChanges();
    this.getSlsTrnpBulkVrItm1().executeQuery();
    this.getSlsTrnpBulkVrItmVO3().executeQuery();
  }

  public String getSoIdFrmDocId(String docId)
  {
    Object o = null;
    try
    {
      o = ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_SLS_BVR_GET_SO_ID(?,?,?,?,?)"), new Object[]
      {
        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
        EbizParams.GLBL_HO_ORG_ID(), docId
      }, Types.VARCHAR);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return o.toString();
  }

  public Integer chkVhclNoSchdlStat(String vhclNo)
  {
    Integer ret = 0;
    ViewObjectImpl vo = this.getSlsTrnpBulkVr1();
    Row r = vo.getCurrentRow();
    Integer docTyp = (Integer) r.getAttribute("DocTypId");
    if (docTyp.equals(2342))
    {
      ret = 0;
    }
    else
    {
      Object o = null;
      try
      {
        o = ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_CHK_VHCL_STAT(?,?,?,?,?)"), new Object[]
        {
          EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
          EbizParams.GLBL_HO_ORG_ID(), vhclNo
        }, Types.INTEGER);
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }

      if (o != null)
      {
        ret = (Integer) o;
      }
    }
    return ret;
  }

  public Integer popVehicle()
  {
    ViewObjectImpl vo = this.getDualForDate1();
    Row r = vo.getCurrentRow();
    String vhclNo = (String) r.getAttribute("TransVhclNo");
    String custVhclNo = (String) r.getAttribute("TransCustVhclNo");
    String ownShipTyp = (String) r.getAttribute("TransOwnershipTyp");
    System.out.println("Valye of ownership type+++" + ownShipTyp);
    ViewObjectImpl vo1 = this.getSlsTrnpBulkVrSrc1();
      /**
      * Added by : Manjeet Singh
      * Modified on : 16-07-2024
      * Remarks : The code will fetch all rows instead of the default limit of 25. '.
      * TMS ID : 132358
      **/
      vo1.setRangeSize(-1);
      /** Till here          **/
    Row r1[] = vo1.getAllRowsInRange();
//    System.err.println("___popVehicle____r1.length______"+r1.length);
    if (r1.length > 0)
    {
      for (Row rr: r1)
      {

        if (ownShipTyp.equalsIgnoreCase("C") || ownShipTyp.equalsIgnoreCase("T"))
        {
          if (custVhclNo != null)
          {
            rr.setAttribute("OldVhclNo", custVhclNo);
            /*** ADDED BY Manjeet ***/
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("VHCL_NO",(String) custVhclNo);
            
          }
          else
          {
            return 0;
          }
        }
        else
        {
          if (vhclNo != null)
          {
            rr.setAttribute("VhclNo", vhclNo);
            /*** ADDED BY Manjeet ***/
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("VHCL_NO",(String) vhclNo);
          }
          else
          {
            return 0;
          }

        }
      }
      vo.executeQuery();
    }
//    System.err.println("_____pageFlowScope.VHCL_NO inside popVehicle_______"+ADFModelUtils.resolvEl("#{pageFlowScope.VHCL_NO}"));
    return 1;
  }

  public void rollback()
  {
    this.getDBTransaction().rollback();
  }

  @Override
  public void generateBulkRequest()
  {
    generateBulkRequest(this);
  }

  public Integer catgIdFrmEoId()
  {

    Integer ret = 0;
    ViewObjectImpl vo = this.getSlsTrnpBulkVrSrc1();
    Row r = vo.getCurrentRow();

    /**
     *
     *
     * ADDED BY : Manjeet Singh
      ADDED ON : 13-10-2023
     *
     *
     * */
    ViewObjectImpl vo1 = this.getSlsTrnpBulkVr1();
    Row r1 = vo1.getCurrentRow();
    Integer docTyp = (Integer) r1.getAttribute("DocTypId");
    if (docTyp.equals(5237))
    {
      return ret;
    }

    /**
     * Till here
     * */
    else
    {
      if (r != null)
      {
        Integer EoId = (Integer) r.getAttribute("EoId");
        System.out.println("EoId=" + EoId);

        Object o = null;
        try
        {
          o =
            ADFModelUtils.callFunction(this, new StringBuilder("APP.APP_GET_CATG_ID_FRM_EO_ID(?,?,?,?,?)"), new Object[]
          {
            EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),
            EbizParams.GLBL_APP_USR_ORG(), EoId
          }, Types.INTEGER);
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }

        if (o != null)
        {
          ret = (Integer) o;
        }
      }
      //      System.out.println("Catg Id=" + ret);
    }


    return ret;
  }

  public String validateBulkVr()
  {
    ViewObjectImpl v1 = this.getSlsTrnpBulkVr1();
    Row r1 = v1.getCurrentRow();
    Object o = null;
    String docId = r1.getAttribute("DocId") + "";
    try
    {
      o = ADFModelUtils.callFunction(this, new StringBuilder("sls.FN_SLS_VLDT_BULK_VR_LOC(?,?,?,?,?)"), new Object[]
      {
        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),
        EbizParams.GLBL_APP_USR_ORG(), docId
      }, Types.VARCHAR);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return o.toString();

  }

  public String populateRptData(String linkId)
  {
    ViewObjectImpl v1 = this.getSlsTrnpBulkVr1();
    Row r1 = v1.getCurrentRow();
    Object o = null;
    String docId = (String) r1.getAttribute("DocId");
    try
    {
      o = ADFModelUtils.callFunction(this, new StringBuilder("SLS.SLS_INS_BULK_VR_RPT_DATA(?,?)"), new Object[]
      {
        docId, linkId
      }, Types.VARCHAR);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return o.toString();
  }

  /**
   * Container's getter for TrnpBulkTrfViewVO1.
   * @return TrnpBulkTrfViewVO1
   */
  public TrnpBulkTrfViewVOImpl getTrnpBulkTrfViewVO1()
  {
    return (TrnpBulkTrfViewVOImpl) findViewObject("TrnpBulkTrfViewVO1");
  }

  /*** Added by Manjeet  **/
  public void selectAllDocTrf(String action)
  {
    //TransChkSelect
    ViewObjectImpl vo = this.getTrnpBulkTrfViewVO1();
    vo.setRangeSize(-1);
    if (action != null)
    {
      if (action.equals("SA"))
      {
        //select ALL

        Row[] row = vo.getAllRowsInRange();
        if (row.length > 0)
        {
          for (Row r: row)
          {
            r.setAttribute("TransChkSelect", "Y");
          }
        }
      }
      else if (action.equals("DA"))
      {

        Row[] row = vo.getAllRowsInRange();
        if (row.length > 0)
        {
          for (Row r: row)
          {
            r.setAttribute("TransChkSelect", "N");
          }
        }
      }
    }
  }

  public void selectAllVRItem(String action)
  {
    //TransChkSelect
    ViewObjectImpl vo = this.getSlsTrnpBulkVrItmVO2();
    vo.setRangeSize(-1);
    if (action != null)
    {
      if (action.equals("SA"))
      {
        //select ALL
        RowSetIterator itr = vo.createRowSetIterator(null);
        while (itr.hasNext())
        {
          Row r = itr.next();
          r.setAttribute("ItmFlag", "Y");
          r.setAttribute("TransItemSelectChk", true);
        }
        this.getTotalItmCBM();
        itr.closeRowSetIterator();
      }
      else if (action.equals("DA"))
      {
        //deSelect ALl
        RowSetIterator itr = vo.createRowSetIterator(null);
        while (itr.hasNext())
        {
          Row r = itr.next();
          r.setAttribute("ItmFlag", "N");
          r.setAttribute("TransItemSelectChk", false);
        }
        this.getTotalItmCBM();
        itr.closeRowSetIterator();

      }
    }
  }

  public String getItmQtyVldt(Number Qty)
  {
//    System.err.println("____________inside getItmQtyVldt_____Qty______"+Qty);
    ViewObjectImpl vo = this.getSlsTrnpBulkVrItmVO2();
    Row rw= vo.getCurrentRow();
    Number DlvQty=(Number)rw.getAttribute("dlvQty");
//    System.err.println("____________inside getItmQtyVldt___DlvQty________"+DlvQty);
    if(Qty.compareTo(DlvQty) == 1)
    {
//      System.err.println("____________inside getItmQty insdie greator_______");
      return "N";
    }
    
    return "Y";
  }
  /**
  * Added by : Manjeet Singh
  * Modified on : 06-05-2024
  * Remarks : This function is designed to verify the quantity loaded during loading for displaying the unscanned barcode report link on the BVR page when transferring to Mombasa. '.
  * TMS ID : 131416
  **/
  public String getLoadingStatus()
  {
    System.err.println("_____Inside getLoadingStatus______");
    String Rslt = "N";
    ViewObjectImpl vo1 = this.getSlsTrnpBulkVr1();
    Row r1 = vo1.getCurrentRow();
    Integer docTyp = (Integer) r1.getAttribute("DocTypId");
    String doc_id=(String)r1.getAttribute("DocId");
    
    System.err.println("_____docTyp______"+docTyp);
    if (docTyp.equals(5237))
    {
      
      try
      {
        Rslt =
          (String) ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_CHECK_LOAD_VERIFIED_QTY(?,?,?,?,?)"),
                                              new Object[]
        {
          EbizParams.GLBL_APP_CLD_ID(),EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(),doc_id
        }, Types.VARCHAR);
        System.err.println("_____FN_CHECK_LOAD_VERIFIED_QTY function will return______"+Rslt);
        if (Rslt!= null && Rslt.equals("Y"))
        {
          return Rslt;
        }
        else
        {
          return "N";
        }
      }
      catch (Exception e)
      {
        ADFModelUtils.showFormattedFacesMessage("Error",
                                                ADFModelUtils.resolvRsrc("MSG.13855") + " SLS.TRNP_GEN_DISP_DOC_ID",
                                                FacesMessage.SEVERITY_ERROR);
        e.printStackTrace();
      }
      
      
      
    }
   
    return Rslt;
  }
  
  public ViewObjectImpl getLovTrfDispIdVO1()
  {
    return (ViewObjectImpl) findViewObject("LovTrfDispIdVO1");
  }

  /**
   * Container's getter for LovTrfIdVO1.
   * @return LovTrfIdVO1
   */
  public ViewObjectImpl getLovTrfIdVO1()
  {
    return (ViewObjectImpl) findViewObject("LovTrfIdVO1");
  }

  /**
   * Container's getter for LovCageVO1.
   * @return LovCageVO1
   */
  public LovCageVOImpl getLovCageVO1()
  {
    return (LovCageVOImpl) findViewObject("LovCageVO1");
  }


  /**
   * Container's getter for TrnpBulkTransferNewVo1.
   * @return TrnpBulkTransferNewVo1
   */
  public ViewObjectImpl getTrnpBulkTransferNewVo1()
  {
    return (ViewObjectImpl) findViewObject("TrnpBulkTransferNewVo1");
  }


  /**
   * Container's getter for SlsTrnpBulkVrSummVO1.
   * @return SlsTrnpBulkVrSummVO1
   */
  public SlsTrnpBulkVrSummVOImpl getSlsTrnpBulkVrSummVO1()
  {
    return (SlsTrnpBulkVrSummVOImpl) findViewObject("SlsTrnpBulkVrSummVO1");
  }

  /**
   * Container's getter for SlsTrnpBulkVrItmVO2.
   * @return SlsTrnpBulkVrItmVO2
   */
  public ViewObjectImpl getSlsTrnpBulkVrItmVO2()
  {
    return (ViewObjectImpl) findViewObject("SlsTrnpBulkVrItmVO2");
  }

  /**
   * Container's getter for BulkVrSummToBulkVrItmVL1.
   * @return BulkVrSummToBulkVrItmVL1
   */
  public ViewLinkImpl getBulkVrSummToBulkVrItmVL1()
  {
    return (ViewLinkImpl) findViewLink("BulkVrSummToBulkVrItmVL1");
  }

  /**
   * Container's getter for LovDocumentTypeVO1.
   * @return LovDocumentTypeVO1
   */
  public ViewObjectImpl getLovDocumentTypeVO1()
  {
    return (ViewObjectImpl) findViewObject("LovDocumentTypeVO1");
  }
/** test **/
  /**
   * Container's getter for LovTrfType1.
   * @return LovTrfType1
   */
  public ViewObjectImpl getLovTrfType1()
  {
    return (ViewObjectImpl) findViewObject("LovTrfType1");
  }

  /**
   * Container's getter for LovBulkTrfOrdVO1.
   * @return LovBulkTrfOrdVO1
   */
  public ViewObjectImpl getLovBulkTrfOrdVO1()
  {
    return (ViewObjectImpl) findViewObject("LovBulkTrfOrdVO1");
  }
}

